[{"id":0,"href":"/post/ides/","title":"Entornos de desarrollo","section":"Posts","content":"Para trabajar con lenguajes de programación, no basta con utilizar un editor de texto: es recomendable contar con una serie de herramientas adicionales que nos ayuden en el proceso de desarrollo o pruebas.\nAl conjunto de herramientas que, junto con el editor, se utilizan para el desarrollo de código, se le denomina entorno de desarrollo, o IDE (Integrated Development Environment);\nA continuación podemos ver algunas de las herramientas más útiles.\nEditor # Herramienta fundamental. Se utiliza para editar el código fuente.\nResaltado de sintaxis # El syntax highlighting es una característica que permite resaltar las palabras reservadas del lenguaje, así como sus estructuras (funciones, bucles, condicionales,\u0026hellip;) para favorecer el proceso de desarrollo.\nAuto-completado de código # Esta característica ofrece opciones para completar el código que se está escribiendo, en tiempo real.\nComprobación sintáctica # Es muy útil contar con herramientas que nos indiquen en tiempo real si el código que hemos escrito está correctamente escrito y no tiene errores sintácticos. A este proceso se le denomina linting. Algunas de las comprobaciones que realizan son:\nLas palabras reservadas están correctamente escritas Las variables contienen tipos de datos válidos Las variables referenciadas están definidas Los nombres de función están correctamente escritos Refactorización y renombrado # En ocasiones es necesario cambiar el nombre de una variable o una función. Para ello, hay que cambiar su nombre en diferentes lugares: en la definición y en los sitios donde se utilice. Este proceso puede ser laborioso si se realiza de manera manual. Por ello, la mayoría de los IDEs ofrecen la opción de renombrar estos elementos.\nEn otro plano similar, es posible que en ocasiones sea necesario cambiar el código para optimizarlo, de manera que produzca los mismos resultados de manera más eficiente o más limpia. A este proceso se le denomina refactorización.\nDocumentación # También es útil contar con la documentación del lenguaje de programación utilizado, así como las descripciones de las funciones y elementos de las librerías con las que se está trabajando. La mayoría de los IDEs muestran de manera contextual esta información.\nControl de versiones # La herramienta fundamental es git. Es recomendable que el IDE sea compatible con esta herramienta y nos proporcione un interfaz para:\nVer los archivos nuevos o modificados Ver los archivos en el área de preparación Mostrar los cambios realizados en el directorio de trabajo. Añadir cambios al área de preparación y hacer commits. Obtener y enviar cambios de los repositorios remotos. Interfaz de comandos # La mayoría de los IDEs ofrecen la posibilidad de abrir un terminal de comandos para realizar acciones en la carpeta del código.\nHerramientas de construcción # Es recomendable también que los IDEs dispongan de herramientas para construir (build) el proyecto. El proceso de construir consiste en transformar el código fuente en código máquina o código ejecutable.\nHerramientas de ejecución y depuración # Los IDEs suelen incluir también herramientas para ejecutar el código y hacer pruebas. Algunas características deseables son:\nEjecutar el programa Ejecutar el programa en diferentes configuraciones Ejecutar el programa llamándolo con diferentes parámetros Ejecutar tests integrados Establecer puntos de ruptura (break points). Los puntos de ruptura permiten interrumpir la ejecución del programa en una determinada línea de código. De esta manera se puede inspeccionar el estado de la ejecución(variables,\u0026hellip;) y comprobar si se ejecuta el código tal como esperamos. IDEs tradicionales # La mayoría de los lenguajes de programación tradicionales ofrecen un IDE de referencia para trabajar con ellos. Por ejemplo:\nEclipse - Utilizado para el desarrollo en Java principalmente, aunque soporta multitud de lenguajes (C#, C++,\u0026hellip;). Netbeans - Utilizado para Java, principalmente. IntelliJ IDEA - Utilizado para Java, principalmente. Microsoft Visual Studio - Utilizado por C#, C++ y otros muchos lenguajes. Se utiliza para desarrollar aplicaciones Windows, web o multiplataforma. PyCharm - Utilizado por Python. Visual Studio Code - Se considera también un editor, aunque ofrece muchas características de IDE. Se utiliza sobre todo en desarrollo web, para CSS, HTML, JavaScript y TypeScript. También se utiliza para desarrollo multiplataforma con flutter. Kits de desarrollo: SDK # Los SDK (Software Development Kit) son paquetes de software que es necesario instalar en el equipo de desarrollo para poder crear programas con una determinada tecnología o lenguaje de programación.\nAsí, por ejemplo, para desarrollar programas en Java, es necesario instalar el JDK, Java Development Kit; para desarrollar programas en JavaScript, es necesario instalar un navegador o la plataforma NodeJS; o, para desarrollar programas en Python, es necesario instalar el intérprete del lenguaje y las librerías (utilidades) que vayamos a utilizar.\nSi utilizamos un IDE específico, es posible que la instalación del SDK se realice de manera automática al instalar dicho IDE. Por ejemplo, Microsoft Visual Studio incorpora la posibilidad de instalar los SDK para el desarrollo de aplicaciones web o aplicaciones de escritorio; algunos IDEs de Java, como NetBeans, incorporan en sus instaladores el JDK.\nEs importante tener en cuenta que la instalación de dichos SDK es imprescindible para el desarrollo en un lenguaje concreto. Sobre todo, si se va a utilizar algún IDE genérico o multilenguaje, dado que dichos IDEs no suelen incorporar ningún SDK.\nIDEs Cloud # Como alternativa a la instalación de un IDE junto con el SDK correspondiente en el equipo local, se puede utilizar un IDE Cloud.\nLos IDEs Cloud ofrecen la posibilidad de instalar un entorno de desarrollo virtualizado accesible a través de Internet.\nEn función del proveedor, el IDE se suele ofrecer en una máquina virtual o en un contenedor. Ambos entornos permiten la ejecución en servidores en la nube, de tal manera que son accesibles a través de una conexión web desde cualquier lugar.\nComo ventajas, tenemos las siguientes:\nAcceso sencillo a través del navegador Acceso desde cualquier equipo No es necesario instalar nada en el equipo local: todo está instalado en el entorno virtualizado Posibilidad de colaboración entre diferentes personas Copias de seguridad Replicación sencilla en otros equipos o cuentas. Como inconveniente principal, tenemos dos:\nCoste. Suelen ser de pago, aunque hay descuentos para estudiantes. Dependencia de Internet. Es necesario disponer de acceso a Internet para acceder al IDE. Algunos de los IDEs Cloud más utilizados son:\nGitHub CodeSpaces - Entornos basados en contenedores. AWS Cloud9 - Entornos basados en máquinas virtuales. "},{"id":1,"href":"/post/lenguajes_programacion/","title":"Lenguajes de programación","section":"Posts","content":" Código fuente # Conjunto de ficheros que almacenan texto escrito en un lenguaje legible por el ser humano. Dicho lenguaje, denominado lenguaje de programación, tiene una sintaxis específica. El texto escrito en dicho lenguaje especifica las acciones que llevará a cabo el programa cuando se ejecute.\nEl código fuente debe traducirse a código máquina para que pueda ser ejecutado en un computador mediante un proceso denominado compilación.\nCódigo fuente en la Wikipedia.\nCódigo máquina, arquitectura y sistemas operativos # El código máquina, también denominado código ejecutable, contiene las instrucciones que deberá ejecutar un computador en su CPU para que pueda funcionar el programa correspondiente.\nEl código máquina depende de la arquitectura del computador para la que se haya generado: el conjunto de instrucciones soportado por el procesador. Por ello, el código máquina de un programa suele ser incompatible con otras arquitecturas para las que no ha sido producido.\nEjemplos de arquitecturas:\nx86 Arm Arm64 PowerPC El código máquina también depende del sistema operativo para el que se haya generado: normalmente, el código fuente utiliza una serie de librerías para utilizar funciones específicas de un sistema operativo (acceso al sistema de ficheros, redes, elementos hardware,\u0026hellip;). Cuando se ejecuta, el programa hace uso de esas librerías, que están en el Sistema Operativo en cuestión.\nCódigo máquina en la Wikipedia.\nCompilación # La compilación es el proceso de generación de ejecutables a partir del código fuente. Existen varias métodos:\nCompilación y enlace - Los ficheros de código fuente se transforman a ficheros de código máquina o ficheros objeto. Posteriormente, el enlazador genera un ejecutable a partir de los ficheros de código máquina, conectándolos con las librerías adicionales necesarias para su funcionamiento. Interpretación - Los ficheros de código fuente no se transforman a código máquina: en lugar de ello, un programa, denominado intérprete, lee línea a línea el código fuente y va realizando la compilación de cada línea de manera independiente. Compilación JIT o Just In Time - Los ficheros de código fuente no se transforman a código máquina: en su lugar, un programa se encarga de realizar la compilación en el momento de la ejecución. Se trata de un híbrido entre la compilación y la interpretación. Figure 1: Ejemplo de compilación\nFigure 2: Ejemplo de interpretación\nFigure 3: Ejemplo de compilación JIT\nEnlazador (linker) # El enlazador es el programa que se encarga de combinar los ficheros objeto en un único objeto o fichero ejecutable. El enlazador puede funcionar de dos maneras: estática y dinámica:\nAl enlazar de manera estática, las librerías de las que depende el programa principal quedan integradas en el fichero ejecutable final. Al enlazar de manera dinámica, las librerías de las que depende el programa principal no se incorporan al ejecutable final. En su lugar, el programa final, cuando se ejecuta, busca las librerías en ficheros externos. Estas librerías externas pueden estar instaladas en el sistema operativo donde se ejecuta el programa o pueden distribuirse junto a él mediante un paquete o instalador, o a través de algún sistema de virtualización, como máquinas virtuales o contenedores. Intérpretes # Un intérprete es un programa que se encarga de ejecutar instrucciones escritas en un determinado lenguaje de programación. El intérprete ejecuta las instrucciones de una en una, sin tener que realizar ningún paso de compilación previo.\nEn ocasiones se habla de lenguajes interpretados o lenguajes compilados. En realidad, la mayoría de lenguajes podrían soportar ambos modelos. Así, cuando se dice que un programa es interpretado o compilado, lo que se quiere decir es que la implementación \u0026ldquo;canónica\u0026rdquo; o más habitual de dicho programa funciona de esa manera determinada.\nCompilación JIT # La compilación JIT, o Just in Time, es un mecanismo de compilación que se realiza durante la ejecución del programa. Por tanto, elimina la necesidad de realizar un paso previo de compilación.\nLa compilación JIT en ocasiones realiza la traducción de código fuente a código ejecutable, aunque en muchos casos lo que se realiza es una traducción de un tipo de lenguaje especial, el bytecode, a código ejecutable.\nByteCode # Bytecode es un tipo de formato de código intermedio, normalmente de tipo binario. Se utiliza habitualmente para reducir la dependencia del hardware donde se ejecuta el programa. Una vez compilado el código fuente a bytecode, éste se ejecuta sobre algún tipo de máquina virtual. De esta manera, el programa compilado podrá ejecutarse en cualquier sistema que tenga instalada dicha máquina virtual.\nEl ejemplo más famoso de lenguaje que utiliza bytecode es Java. El código fuente de Java se compila a bytecode, por ejemplo, un fichero jar. Dicho fichero bytecode puede ejecutarse en la Máquina Virtual Java (JVM, o Java Virtual Machine). Así, en cualquier equipo donde esté instalada la JVM podrá ejecutarse dicho programa.\nFigure 4: Ejemplo de compilación Bytecode\nVirtualización # La virtualización permite la ejecución de un programa en un entorno aislado. De esta manera se garantiza que las aplicaciones no interfieran unas con otras, o que tengan acceso exclusivo a sus recursos, sin afectar al resto de aplicaciones.\nEn ocasiones, diferentes aplicaciones necesitan acceder a diferentes librerías, o incluso a versiones diferentes de las mismas librerías. Si esas librerías necesitan ser cargadas de manera dinámica, en tiempo de ejecución, deben estar disponibles en el entorno donde se ejecuta dicha aplicación. Pongamos por ejemplo una aplicación que necesita la versión 1 de la librería lib1, y que una segunda aplicación necesita la versión 2 de la misma librería. Es posible que solo una de ellas pueda estar disponible a la vez, por lo que una de las aplicaciones podría no funcionar correctamente al no encontrar la versión que necesita:\nFigure 5: Conflicto de dependencias\nMediante la virtualización, sería posible ejecutar cada aplicación en un entorno aislado independiente, por lo que cada entorno podría tener instalada su propia versión de la librería necesaria:\nFigure 6: Ejemplo de virtualización\nExisten diferentes posibilidades para implementar esa virtualización. Algunas de las opciones son las siguientes:\nDependencias de proyecto - En el desarrollo de aplicaciones, cada aplicación puede instalar las dependencias necesarias para su funcionamiento en una carpeta de proyecto. De esta manera, las versiones necesarias de las librerías no se instalan a nivel de sistema, sino que se instalan a nivel de proyecto. Máquina virtual de aplicación o proceso - Son programas software que se encargan de ejecutar aplicaciones de manera independiente del hardware. Normalmente, estas máquinas ejecutan bytecode. La Máquina Virtual de Java, JVM, es su ejemplo más paradigmático. Máquina virtual de sistema - Son las máquinas virtuales completas, que usualmente integran un sistema operativo invitado. Aplicaciones como VirtualBox o VMWare permiten crear este tipo de máquinas. Las aplicaciones que se ejecutan dentro de este tipo de máquinas virtuales tienen acceso exclusivo a un sistema operativo. De esta manera, todas las librerías que se instalen dentro de una máquina virtual no interferirán con las del resto de máquinas virtuales. Contenedores - También llamados sistemas de virtualización ligera. Permiten encapsular aplicaciones, junto con sus librerías y configuración, en un formato específico que puede ser desplegado mediante un motor de contenedores. El más popular es Docker. Los contenedores se diferencian de las máquinas virtuales de sistema en que no incorporan sistema operativo invitado. Figure 7: Docker vs MV Drinkler, CC BY-SA 4.0 https://creativecommons.org/licenses/by-sa/4.0, via Wikimedia Commons\n"},{"id":2,"href":"/post/bootstrap/","title":"Bootstrap","section":"Posts","content":"Bootstrap es una biblioteca de clases CSS pensada para facilitar la creación de prototipos web. Ofrece una serie de clases CSS listas para ser usadas en cualquier proyecto prácticamente sin necesidad de tener que crear código CSS. Los estilos han sido diseñados para ofrecer un aspecto visual uniforme independientemente del tipo de navegador o sistema operativo utilizado.\nModo de trabajar # Bootstrap nos proporciona el código CSS ya hecho. Por tanto, nuestra tarea consistirá en utilizar las clases que necesitemos para crear los componentes necesarios para nuestra interfaz. Para ello ofrecen una detallada documentación.\nAlternativas # Existe una gran multitud de alternativas a Bootstrap. El funcionamiento de todas ellas es similar, únicamente cambian algunos nombre de clases. Entre las más interesantes podemos destacar:\nBulma Pure CSS Materialize Tutoriales de uso # Bootstrap: introducción y uso Bootstrap: layout Bootstrap: utilidades y edición de contenido Bootstrap: componentes "},{"id":3,"href":"/post/jekyllcms/","title":"Fundamentos del CMS Jekyll","section":"Posts","content":"Jekyll es un gestor de contenido de tipo estático (static site generator). No depende de ninguna base de datos ni de ningún lenguaje de servidor. Utiliza ficheros de texto para almacenar los contenidos y los datos. Dado que no utiliza tecnologías de servidor, es necesario realizar un proceso de generación o compilación para producir archivos HTML válidos que puedan ser alojados en un servidor y procesados adecuadamente por un navegador web convencional.\nEn Jekyll podemos distinguir varias categorías de archivos:\nFicheros de configuración - Almacenan la configuración general del sitio y las opciones de personalización. Ficheros de contenido - Almacenan los contenidos de las páginas del sitio. Ficheros de datos - Permiten crear estructuras de datos que pueden ser mostrados en las distintas páginas del sitio o utilizarse para generar estructuras, menús de navegación, listas,\u0026hellip; Ficheros de plantillas - Se utilizan para crear la estructura de las páginas que componen el sitio web. Jekyll utiliza un sistema de plantillas denominado Liquid para combinar los distintos tipos de ficheros y crear el resultado final: un sitio web totalmente estático que utiliza únicamente HTML, CSS y JavaScript.\nLa documentación de Jekyll puede consultarse en este enlace.\nInstalación # Las instrucciones de instalación de Jekyll pueden consultarse aquí. Utiliza el ecosistema Ruby para ejecutarse.\nUna vez instado Ruby se puede proceder a instalar Jekyll mediante el siguiente comando:\ngem install jekyll bundler Uso básico # Jekyll se ejecuta desde la linea de comandos. Su uso básico permite:\nCrear un nuevo sitio Jekyll mediante jekyll new NOMBRE_PROYECTO. Este comando crea un nuevo proyecto Jekyll en la carpeta ./NOMBRE_PROYECTO. Todas las acciones que se indican a continuación se deben ejecutar dentro de dicha carpeta. Generar el sitio web en la carpeta ./_site mediante bundle exec jekyll build. Lanzar un servidor web para visualizar el proyecto en el navegador mediante bundle exec jekyll serve. Una vez lanzado se puede acceder al sitio web a través del navegador en http://localhost:4000. Mediante este comando se pueden ver los cambios automáticamente sin necesidad de tener que generar el proyecto cada vez. Puede obtenerse más información en https://jekyllrb.com/docs/quickstart/.\nOrganización de archivos # La organización de archivos y carpetas en un proyecto Jekyll se puede consultar en https://jekyllrb.com/docs/structure/. Jekyll está pensado para utilizar temas, aunque se puede crear una estructura propia a partir de los siguientes archivos:\n_config.yml Fichero YAML de configuración. En él se detallan las opciones de configuración del proyecto. _layouts Carpeta que incluye los ficheros de plantilla. Cada fichero es un fichero HTML que se utiliza para englobar el contenido de las distintas páginas que componen el sitio. El nombre del fichero es el nombre de la plantilla. La etiqueta {{content}} se utiliza para incluir el contenido de la página que está usando la plantilla. Más información en https://jekyllrb.com/docs/layouts/. _includes Carpeta que incluye los ficheros HTML que se utilizan como parciales para ser incluidos en plantillas u otras páginas del sitio. La etiqueta {% include ARCHIVO.html%} se utilizará para incluir el contenido del fichero _includes/ARCHIVO.html. Más información en https://jekyllrb.com/docs/includes/. Carpeta principal Los ficheros HTML (o MarkDown) que aparezcan en la carpeta principal del proyecto formarán las páginas estáticas del sitio. Cada página tendrá definido un front matter donde se indicará, entre otras cosas, qué plantilla utilizará dicha página. _site Carpeta que contiene el sitio web generado por Jekyll una vez realizadas todas las tareas de procesado (inyección del contenido de los archivos parciales, aplicación de plantillas, procesado de datos, etc.). El contenido de esta carpeta puede ser publicado en cualquier servidor HTTP. Front matter # El front matter es el contenido de texto que aparece al comienzo de cualquier archivo que deba ser procesado por Jekyll. Si Jekyll encuentra un archivo que no tenga definido un front matter no lo procesa y lo copia a la misma localización del directorio _site. El front matter está delimitado entre dos líneas formadas por un tres guiones. Su aspecto es parecido al siguiente:\n--- layout: mi_layout permalink: /url/estatica/de/la/pagina title: Título de la página --- En el front matter se pueden definir datos en forma variable: valor que luego podrán ser utilizados por el sistema Liquid de plantillas. Su uso más básico permite definir las siguientes características de la página:\nlayout Indica el archivo de plantilla que se utilizará para mostrar la página. El nombre definido en esta variable hace referencia al archivo del mismo nombre sin la extensión presente en la carpeta _layouts. permalink Indica la URL estática que tendrá la página web en caso de querer que se muestre alguna distinta al nombre del archivo. title El título de la página. Normalmente todos los ficheros que necesiten acceder al sistema de plantillas de Jekyll tendrán definido un front matter. Aquellos otros que no lo necesiten (por lo general, archivos CSS, JS, imágenes y demás) no tendrán definido un front matter (es posible que algunos de ellos, dependiendo del tipo de aplicación, sí que lo necesiten).\nPuede consultarse más información sobre el front matter en https://jekyllrb.com/docs/frontmatter/.\nIntegración con GitHub Pages # Jekyll está integrado en el servicio de GitHub Pages. Si se sube un repositorio con un proyecto Jekyll a la rama de GitHub Pages (gh-pages), este se compilará automáticamente y será publicado en Internet. Por tanto, no es necesario compilarlo antes de subirlo ni subir la carpeta _site.\nEn estos enlaces puede consultarse más información sobre GitHub Pages y Jekyll y GitHub Pages.\n"},{"id":4,"href":"/post/audio_video_html/","title":"Audio y vídeo en HTML","section":"Posts","content":"HTML5 define las etiquetas \u0026lt;audio\u0026gt; y \u0026lt;video\u0026gt; para incorporar archivos de audio y vídeo respectivamente en páginas web. En este artículo veremos cómo utilizar dichas etiquetas, qué formatos de vídeo y audio son compatibles con los distintos navegadores y qué programas podemos utilizar para editar y realizar conversiones entre distintos formatos.\nAudio # Etiqueta \u0026lt;audio\u0026gt; # Los archivos de audio pueden insertarse en una página web mediante la etiqueta \u0026lt;audio\u0026gt;. Dicha etiqueta permite especificar varios archivos de audio de manera ordenada. De esta manera, el navegador intentará reproducir el primer archivo de la lista para el que tenga soporte.\n\u0026lt;audio controls\u0026gt; \u0026lt;source src=\u0026#34;cancion.ogg\u0026#34; type=\u0026#34;audio/ogg\u0026#34;\u0026gt; \u0026lt;source src=\u0026#34;cancion.mp3\u0026#34; type=\u0026#34;audio/mpeg\u0026#34;\u0026gt; El navegador no soporta la etiqueta audio. \u0026lt;/audio\u0026gt; En el ejemplo anterior, el navegador intentará reproducir el archivo cancion.ogg; en caso de que no soporte ese tipo de archivo, intentará reproducir cancion.mp3.\nLa etiqueta \u0026lt;audio\u0026gt; admite varios atributos. En el caso del ejemplo, el atributo controls indica que se deben mostrar los controles de reproducción.\nPara más información sobre las opciones de la etiqueta \u0026lt;audio\u0026gt; se pueden consultar los siguientes enlaces:\nhttps://developer.mozilla.org/es/docs/Web/HTML/Elemento/audio https://www.w3schools.com/tags/tag_audio.asp Formatos de audio # Los principales formatos utilizados para audio son:\nMP3 - Formato más utilizado. Compatible con todos los navegadores. OGG - Formato OGG Vorbis. No compatible con IE ni con Safari. WAV - No compatible con IE. Para más información sobre compatibilidad de formatos multimedia puede consultarse:\nhttps://developer.mozilla.org/es/docs/Web/HTML/Formatos_admitidos_de_audio_y_video_en_html5 Programas de edición de audio # Audacity - Programa de edición de audio Open Source. Vídeo # Etiqueta \u0026lt;video\u0026gt; # Los archivos de vídeo pueden insertarse en una página web mediante la etiqueta \u0026lt;video\u0026gt;. Dicha etiqueta permite especificar varios archivos de vídeo de manera ordenada. De esta manera, el navegador intentará reproducir el primer archivo de la lista para el que tenga soporte.\n\u0026lt;video width=\u0026#34;320\u0026#34; height=\u0026#34;240\u0026#34; controls\u0026gt; \u0026lt;source src=\u0026#34;video.mp4\u0026#34; type=\u0026#34;video/mp4\u0026#34;\u0026gt; \u0026lt;source src=\u0026#34;video.ogg\u0026#34; type=\u0026#34;video/ogg\u0026#34;\u0026gt; El navegador no soporta la etiqueta video. \u0026lt;/video\u0026gt; En el ejemplo anterior, el navegador intentará reproducir el archivo video.mp4; en caso de que no soporte ese tipo de archivo, intentará reproducir video.ogg.\nLa etiqueta \u0026lt;video\u0026gt; admite varios atributos. En el caso del ejemplo, el atributo controls indica que se deben mostrar los controles de reproducción.\nPara que los vídeos se adapten correctamente a cualquier ancho de pantalla se puede definir su anchura al 100%. De esta manera se adaptará al ancho del elemento contenedor. Es importante dejar la altura en auto para preservar la relación de aspecto. Un ejemplo de código CSS sería el siguiente:\nvideo { width: 100%; height: auto; } Para más información sobre las opciones de la etiqueta \u0026lt;video\u0026gt; se pueden consultar los siguientes enlaces:\nhttps://developer.mozilla.org/es/docs/Web/HTML/Elemento/video https://www.w3schools.com/tags/tag_video.asp Formatos de vídeo # Los principales formatos utilizados para vídeo son:\nMP4 - Contenedor MP4, códec de vídeo H264 y códec de audio AAC. Formato más utilizado. Compatible con todos los navegadores. OGG - Contenedor OGG, códec de vídeo Theora y códec de audio Vorbis. No compatible con IE ni con Safari. WebM - Contenedor WebM, códec de vídeo VP8 y códec de audio Vorbis. No compatible con IE ni con Safari. Para más información sobre compatibilidad de formatos multimedia puede consultarse:\nhttps://developer.mozilla.org/es/docs/Web/HTML/Formatos_admitidos_de_audio_y_video_en_html5 Programas de edición de vídeo # Openshot - Editor de vídeo Open Source Handbrake - Conversor de formatos de vídeo OBS Studio - Software de grabación de vídeo y transmisión en vivo "},{"id":5,"href":"/post/transiciones_css/","title":"Transformaciones, transiciones y animaciones en CSS","section":"Posts","content":"En este artículo estudiaremos las herramientas disponibles en CSS para crear transformaciones, transiciones y animaciones.\nTransformaciones # Las transformaciones CSS permiten mover, rotar, escalar o inclinar elementos. CSS permite realizar transformaciones 2D y 3D.\nLas transformaciones en principio son estáticas: es decir, no están animadas (aunque pueden estarlo mediante transiciones o animaciones). Un ejemplo de transformación sería el siguiente:\n#div1 { transform: rotate(20deg); /* Rotación 2D de 20º */ } #div2 { transform: rotateY(150deg); /* Rotación 3D de 150º en el eje Y */ } En este enlace puede verse un ejemplo de rotación 2D. En este otro puede verse un ejemplo de rotación 3D.\nEn los siguientes enlaces puede consultarse información más detallada sobre las distintas transformaciones que pueden realizarse en CSS:\nTransformaciones 2D Transformaciones 3D Transiciones # Las transiciones CSS permiten realizar cambios graduales de determinadas propiedades con una duración determinada. Para definir una transición es necesario especificar:\nLa(s) propiedad(es) a animar La duración de la transición Opcionalmente, el retraso y la curva de velocidad de la transición Es importante tener claro que la transición se ejecutará cuando se produzca un cambio en el valor de la propiedad definida en la transición. Por ejemplo, si se define una transición para la propiedad width de una capa, la transición se producirá cuando se realice un cambio en la anchura de dicha capa. Los cambios de valor de la propiedad pueden realizarse básicamente de dos maneras:\nA través de una pseudo-clase (como por ejemplo, :hover, que se activa al pasar el ratón por encima) A través de JavaScript Por último, hay que tener en cuenta que solo se pueden realizar transiciones (y animaciones) sobre propiedades CSS que sean animables.\nA continuación se muestra un ejemplo de transición de la propiedad width de una capa (en este enlace puede verse el ejemplo en ejecución):\ndiv { width: 100px; height: 100px; background: red; transition: width 2s; } div:hover { width: 300px; } En el ejemplo se ha definido una transición para la propiedad width con una duración de 2 segundos. Cuando cambie el valor de dicha propiedad, el cambio no se realizará bruscamente, sino que se realizará progresivamente hasta alcanzar el nuevo valor pasados 2 segundos. En este caso el cambio de valor de width se produce al pasar el ratón por encima de la capa, aunque también funcionaría si se cambia el valor de dicha propiedad width a través de JavaScript.\nA continuación se muestra un ejemplo de transición con pseudo-clases y JavaScript.\nEn el siguiente enlace puede consultarse más información sobre transiciones CSS.\nAnimaciones # Las animaciones CSS permiten ejecutar cambios de estilos sobre un determinado elemento de manera gradual a través de una serie de estados denominados fotogramas clave (keyframes).\nUn ejemplo de animación sería el siguiente:\n/* Definición de la animación */ @keyframes cambios{ 0% { background-color: red; width: 100px; } 25% { background-color: yellow; width: 50px; transform: translate(0, 100px); } 50% { background-color: blue; width: 100px; transform: translate(100px, 100px); } 75% { background-color: blue; width: 150px; transform: translate(100px, 0); } 100% { background-color: red; width: 100px; transform: translate(0, 0); } } /* Elemento que recibe la animación */ div { width: 100px; height: 100px; background-color: red; animation-name: cambios; animation-duration: 4s; animation-iteration-count: infinite; } El funcionamiento del ejemplo se describe a continuación:\nEn primer lugar se definen los fotogramas clave mediante @keyframes indicando el nombre de la animación (cambios). En este caso se definen 5 fotogramas clave que representan los estilos deseados en los instantes de tiempo definidos en porcentajes. En cada fotograma clave es posible definir varios estilos. Los cambios de estilos entre fotogramas clave se realizan progresivamente mediante transiciones. Por último, se asigna la animación a la capa deseada mediante la propiedad animation-name indicando el nombre de la animación definida con anterioridad (cambios) y se especifica un tiempo mediante animation-duration. Opcionalmente se pueden definir el número de veces que se ejecutará la animación con animation-iteration-count. Para obtener más información sobre animaciones pueden consultarse los siguientes enlaces:\nhttps://www.w3schools.com/css/css3_animations.asp https://developer.mozilla.org/es/docs/Web/CSS/@keyframes "},{"id":6,"href":"/post/imagenes_web/","title":"Imágenes en la web","section":"Posts","content":"Las imágenes incluidas en los sitios web son responsables de gran parte del tamaño de descarga. Por tanto, es de vital importancia utilizar las técnicas adecuadas tanto para su correcta visualización (independientemente del tipo de dispositivo utilizado) como para su optimización de tamaño de cara a mejorar la velocidad de carga del sitio.\nFundamentos técnicos # Tipos de imagen # Figure 1: Imagen raster y vectorial\nPodemos distinguir entre dos grandes grupos de imágenes:\nMapas de bits (raster) - Son imágenes compuestas por píxeles. Son las captadas por las cámaras o creadas por programas de edición. Vectoriales - Son imágenes que muestran su información mediante descripciones matemáticas. Están creadas exclusivamente por programas de edición. Las imágenes de mapa de bits se suelen utilizar en fotografías. Tienen una resolución fija, por lo que al ampliarse pierden calidad (a este proceso se le denomina aliasing). Suelen ocupar mucho espacio de almacenamiento y por ello se suelen almacenar en formatos que soportan compresión.\nLas imágenes vectoriales se suelen utilizar en diseño (carteles, folletos, logos, cómics,\u0026hellip;). No tienen una resolución fija, por lo que no pierden calidad al ampliarse. Suelen ocupar poco espacio de almacenamiento. No están pensadas para imágenes de muy alta complejidad. Para mostrarse en pantallas se tienen que convertir a mapas de bits mediante un proceso llamado render.\nProfundidad de color # La profundidad de color se refiere a la cantidad de bits utilizados para representar un píxel de una imagen. Actualmente se utiliza una profundidad de color de 32 bits:\n8 bits para el color rojo (256 gamas de rojo) 8 bits para el color verde (256 gamas de verde) 8 bits para el color azul (256 gamas de azul) 8 bits para el canal alfa (256 gamas de transparencia/opacidad) Resolución # La resolución de imagen indica la cantidad de píxeles que componen una imagen. Está directamente relacionada con el nivel de detalle: a mayor resolución, mayor nivel de detalle.\nNormalmente se especifica en formato ancho x alto o en megapíxeles (multiplicación del ancho por el alto): por ejemplo, una imagen de 1600 x 1200 píxeles = 1.920.000 píxeles = 1.92 Megapíxeles.\nSe define la relación de aspecto como la proporción entre la anchura y la altura. Así, una imagen de 1600 x 1200 píxeles tiene una relación de aspecto de 1.33.\nCompresión # El tamaño de una imagen sin comprimir depende de la resolución y de la profundidad de color. Así, una imagen de 1600x1200px con color de 32 bits tendrá un tamaño:\nTamaño = 1600 * 1200 * 32 = 61440000 bits = 7680000 Bytes = 7.32 MB\nEs necesario por tanto comprimir la imagen mediante alguno de los formatos específicos creados para ello.\nFormatos # Los formatos más utilizados en el diseño web son: Algunos de los formatos más habituales son:\nBMP - Mapa de bits sin compresión. ICO - Mapa de bits sin compresión. Utilizado para iconos. JPEG - Mapa de bits comprimido. Utilizado para fotografías. PNG - Mapa de bits con o sin compresión. Utilizado para fotografías o dibujos. APNG - Mapa de bits animado con o sin compresión. GIF - Mapa de bits animado con compresión. Utilizado para animaciones de baja calidad. WebP - Mapa de bits con compresión. Utilizado para fotografías o dibujos (no soportado en Safari). SVG - Imagen vectorial. Para más información se puede consultar este artículo sobre compatibilidad de formatos de imagen en navegadores.\nSoftware # A continuación se indican algunos de los programas Open Source más utilizados para la edición de imágenes:\nGIMP - Programa de edición de imágenes de mapa de bits similar a Photoshop. Inkscape - Programa de edición de imágenes vectoriales. Optimización de imágenes para web # La optimización de imágenes es fundamental para mejorar el tiempo de carga de los sitios web. Una de las opciones más interesantes consiste en especificar diferentes versiones de una imagen para distintos tipos de dispositivos. De esta manera, el dispositivo solo descargará aquella imagen que sea más apropiada para sus características, como puede ser el formato (webp, jpeg,\u0026hellip;) o la resolución. Así, un dispositivo de baja resolución descargará una imagen de peor calidad y menor tamaño, optimizando así su velocidad de descarga y evitando utilizar una resolución que no puede aprovechar, mientras que un dispositivo de alta resolución descargará una imagen de mejor calidad.\nHTML5 define dos opciones para proporcionar diferentes versiones de una imagen:\nEl atributo srcset La etiqueta \u0026lt;picture\u0026gt;. Ambas opciones pueden utilizarse incluso de manera combinada. Sin embargo, cada una está pensada para un caso de uso distinto. Podemos distinguir 3 casos de uso:\nUtilizar imágenes de distinta resolución que van a ocupar la misma proporción de pantalla en todos los dispositivos. Por ejemplo, una imagen que va a ocupar el 100% de la pantalla tanto en dispositivos móviles como pantallas grandes. A este caso lo denominaremos cambio de resolución. Utilizar imágenes de distinta resolución que van a ocupar distinta proporción de pantalla en función del dispositivo.se van a mostrar. Por ejemplo, una imagen que va a ocupar el 100% de la pantalla en dispositivos móviles pero un 50% en pantallas grandes. A este caso lo llamaremos cambio de resolución con distintos tamaños. Por último, utilizar imágenes con distinta relación de aspecto (relación entre el ancho y el alto) en función del dispositivo. Por ejemplo, una imagen apaisada con la información más importante en la parte central se verá adecuadamente en pantallas grandes; sin embargo, en dispositivos móviles se verá muy delgada. En este último caso es conveniente proporcionar una versión recortada de la imagen que muestre los detalles importantes. A este caso se le denomina dirección de arte. Figure 2: Problema de dirección de arte. Fuente: MDN Web Docs\nCambio de resolución # En este caso supondremos que la imagen va a ocupar el mismo ancho de pantalla en todo tipo de dispositivos. En el ejemplo se asumirá que la imagen va a ocupar siempre el 100% del ancho de pantalla, tanto en pantallas grandes como en móviles. En estos casos lo recomendable es utilizar el atributo srcset del elemento \u0026lt;img\u0026gt;. Este atributo proporciona al navegador una serie de opciones para que elija la mejor opción en función de la resolución. Es el navegador el encargado de elegir, no se fuerza elección alguna.\nEn este caso, para optimizar la elección de la imagen a cargar, habrá que tener en cuenta únicamente el tamaño de las imágenes. Pongamos por ejemplo que disponemos de 3 versiones de una imagen: los anchos de resolución de las imágenes son 450px, 850px y 1400px. Así, tendremos que:\nUn dispositivo con un ancho de 900px debería mostrar la imagen de 1400px, ya que la anterior se quedaría corta y perdería calidad al ampliarla. Un dispositivo con un ancho de 700px debería utilizar la imagen de 850px. Un dispositivo de 380px debería utilizar la imagen de 450px. El código a utilizar sería el siguiente:\n\u0026lt;img alt=\u0026#34;Imagen\u0026#34; src=\u0026#34;imagen_450.jpg\u0026#34; srcset=\u0026#34;imagen_450.jpg 450w, imagen_850.jpg 850w, imagen_1400.jpg 1400w\u0026#34;\u0026gt; En el código anterior tenemos que:\nSe utiliza el atributo src para indicar la imagen a utilizar por defecto en caso de que el navegador no soporte srcset. Se utiliza el atributo srcset para indicar una lista de posibles imágenes indicando su resolución. La resolución en este caso se indica mediante la unidad w, que hace referencia a la anchura (width). imagen_450.jpg 450w significa que ese archivo de imagen tiene una resolución de 450px. De manera alternativa se puede indicar la resolución utilizando descriptores: 1x, 1.5x, 2x,\u0026hellip; Estos descriptores hacen referencia a la densidad de píxeles de la pantalla: 1x es resolución convencional, mientras que 2x es la resolución utilizada por dispositivos de alta resolución, como las pantallas Retina de Apple. Así, sería posible utilizar imagen_1400.jpg 2x, indicando que esa versión de imagen debe ser utilizada por dispositivos de alta resolución únicamente. Cambio de resolución: distintos tamaños de imagen # En este caso supondremos que la imagen va a ocupar el distinto ancho de pantalla según el tipo de dispositivo. Siguiendo con el caso del ejemplo anterior (versiones de imagen con resolución 450px, 850px y 1400px), asumiremos que se ha creado código CSS que haga uso de media queries con las siguientes reglas:\nEn pantallas grandes (\u0026gt;768px), la imagen ocupará un 50% de la pantalla. En pantallas pequeñas (\u0026lt;768px), la imagen ocupará el 100% de la pantalla. En este caso, para optimizar la elección de la imagen a cargar habrá que tener en cuenta no solo el tamaño de las imágenes, sino también qué espacio van a ocupar. Así, tendremos que:\nSi la resolución del dispositivo es de 900px, en principio parece que debería utilizar la imagen de 1400px. Sin embargo, en nuestro código CSS hemos configurado las imágenes para que ocupen un 50% de la pantalla. Por tanto, la imagen ocupará 450px. Bastará entonces con cargar la imagen de 450px. Si la resolución del dispositivo es de 700px queremos que la imagen se muestre ocupando un 100% de la pantalla. Por tanto, se deberá cargar la imagen de 850px. Para cargar la imagen de 1400px el dispositivo deberá tener una resolución mínima de 1701px: en este caso la imagen ocupará un 50% de la pantalla, es decir, 850.5px, por lo que no le bastará con la de 850px y deberá cargar la de 1400px, Para que el navegador tenga en cuenta los tamaños que van a ocupar las imágenes en los distintos tipos de dispositivo hay que utilizar el atributo sizes del elmento \u0026lt;img\u0026gt;: este atributo permite especificar condiciones de tamaño en forma de media queries junto con una referencia al tamaño que ocupará la imagen (por ejemplo, en unidades vw).\nEl código a utilizar sería el siguiente:\n\u0026lt;img alt=\u0026#34;Imagen\u0026#34; src=\u0026#34;imagen_450.jpg\u0026#34; srcset=\u0026#34;imagen_450.jpg 450w, imagen_850.jpg 850w, imagen_1400.jpg 1400w\u0026#34; sizes=\u0026#34;(min-width: 768px) 50vw, 100vw\u0026#34;\u0026gt; En el código anterior tenemos que:\nSe añade el atributo sizes a la imagen. Este atributo indica una lista de tamaños con indicación opcional de media queries. Así, (min-width: 768px) 50vw indica que en dispositivos con anchura mínima de 768px van a mostrar la imagen ocupando un 50% de la pantalla (50vw). El elemento 100vw, al no tener media query, indica que si no se cumple ninguna otra condición la imagen ocupará un 100% de la pantalla. ¡IMPORTANTE! El atributo sizes no cambia el ancho de la imagen. Simplemente tiene una función informativa para determinar qué resolución se debería cargar. Para cambiar el tamaño de la imagen habrá que utilizar reglas y media queries CSS convencionales.\nDirección de arte # Esta técnica consiste en mostrar diferentes versiones de la imagen en función de la anchura del dispositivo. Normalmente se utiliza para recortar imágenes y que se vea la información más importante en pantallas pequeñas.\nPor ejemplo, supongamos que se quiere mostrar 2 versiones distintas de la imagen en función del tipo de dispositivo:\nEn pantallas grandes (\u0026gt;768px) se mostrará la imagen img_wide.jpg, que es una versión completa de la imagen en formato apaisado. En pantallas pequeñas (\u0026lt;768px) se mostrará la imagen img_mobile.jpg, que es una versión recortada de la imagen en formato cuadrado. Para la dirección de arte se utiliza la etiqueta \u0026lt;picture\u0026gt;. Esta etiqueta permite definir varios archivos de imagen a través de etiquetas \u0026lt;source\u0026gt; junto con media queries para hacer que se muestre una determinada imagen en función de la resolución del dispositivo. Esta etiqueta fuerza al navegador a escoger la imagen necesaria, a diferencia del atributo srcset, que permite al navegador elegir.\nEl código a utilizar sería el siguiente:\n\u0026lt;picture\u0026gt; \u0026lt;source media=\u0026#34;(min-width: 768px)\u0026#34; srcset=\u0026#34;img_wide.jpg\u0026#34;\u0026gt; \u0026lt;source srcset=\u0026#34;img_mobile.jpg\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;img_mobile.jpg\u0026#34; alt=\u0026#34;Imagen\u0026#34;\u0026gt; \u0026lt;/picture\u0026gt; El funcionamiento del código es el siguiente:\nEl primer elemento \u0026lt;source\u0026gt; define un archivo de imagen que se deberá utilizar en dispositivos cuya anchura sea mayor de 768px. El segundo elemento \u0026lt;source\u0026gt; define un archivo de imagen que se deberá utilizar en el resto de casos. El elemento \u0026lt;img\u0026gt; es obligatorio incluirlo, ya que proporciona en primer lugar el atributo alt con la descripción textual de la imagen y ofrece compatibilidad con los navegadores que no soporten la etiqueta \u0026lt;picture\u0026gt;. Es importante dejar claro que el elemento \u0026lt;picture\u0026gt; está pensado para los casos de dirección de arte (mostrar imágenes distintas en función del dispositivo). Si lo que se pretende es ofrecer distintas resoluciones de la misma imagen, entonces es mejor utilizar elementos \u0026lt;img\u0026gt; con atributos srcset y sizes.\nPor último, señalar que se puede utilizar simultáneamente el elemento \u0026lt;picture\u0026gt; para dirección de arte y además proporcionar alternativas de resolución con el atributo srcset (ya que éste se puede utilizar también en los elementos \u0026lt;source\u0026gt;).\nReferencias # A continuación se indican algunos enlaces con más información sobre el tema:\nGoogle - Imágenes responsivas MDN - Imágenes responsivas Generador de imágenes responsivas MDN - El elemento \u0026lt;picture\u0026gt; Aplicar estilos a imágenes # En ocasiones hacer que las imágenes se muestren adecuadamente puede ser complicado. En el siguiente enlace se muestran algunas técnicas para personalizar la apariencia de las imágenes mediante CSS. En él se muestran técnicas de centrado, diseño responsivo o creación de efectos o filtros.\nLa técnica más importante para crear imágenes responsivas (que se adapten correctamente a la capa contenedora) consiste en introducir la etiqueta \u0026lt;img\u0026gt; dentro de una etiqueta \u0026lt;div\u0026gt; y establecer el ancho de la imagen al 100%. De esta manera, redimensionando la etiqueta \u0026lt;div\u0026gt; contenedora se podrá cambiar el tamaño de la imagen. El código sería el siguiente:\nimg { width: 100%; } .img_container { /* Aquí es donde se debe cambiar el ancho deseado de la imagen */ } \u0026lt;div class=\u0026#34;img_container\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; "},{"id":7,"href":"/post/licencias/","title":"Licencias y propiedad intelectual","section":"Posts","content":"A la hora de crear un sitio web es muy importante conocer la legislación sobre propiedad intelectual y los distintos tipos de licencias disponibles tanto para proteger los contenidos o código que generemos como para utilizar adecuadamente contenido creado por terceros.\nDerechos de autor # El derecho de autor es un conjunto de normas jurídicas y principios que afirman los derechos morales y patrimoniales que la ley concede a los autores (los derechos de autor), por el simple hecho de la creación de una obra literaria, artística, musical, científica o didáctica, esté publicada o inédita. \u0026ndash;Fuente: Wikipedia\nFigure 1: Símbolo del Copyright\nEs importante tener claro que los derechos de autor abarcan la expresión de contenidos, no las ideas. Los derechos de autor están presentes con la simple creación de la obra: por tanto, si no se indica lo contrario, se debe asumir que la obra está protegida por derechos de autor.\nEn el campo del desarrollo de software, los sitios web, código y diseños están protegidos por los derechos de autor.\nEl titular de los derechos de autor goza de los siguientes derechos exclusivos:\nReproducción de la obra Trabajos derivados Distribución Exposición Para más información se puede consultar el artículo de la Wikipedia sobre derechos de autor.\nCopyleft # El Copyleft es una práctica que consiste en ejercer el derecho de autor de manera que se permitan determinadas acciones con el fin de propiciar el libre uso y distribución de una obra. Un ejemplo de ello sería permitir la libre reproducción de una imagen con fines no comerciales.\nFigure 2: Símbolo del Copyleft\nLa primera licencia de este tipo fue la GNU General Public License, creada por Richard Stallman.\nDentro de este tipo de licencias podemos distinguir dos grandes grupos:\nLas licencias copyleft relacionadas con software o código. Las licencias copyleft relacionadas con obras que no son software. Licencias para software # Las licencias más utilizadas en el mundo de software son:\nMIT License - Es la licencia más sencilla y permisiva de todas. Simplemente exige que se muestre la licencia y el reconocimiento de la autoría. GNU GPL - Existen varias versiones de esta licencia, actualmente la versión 3. Exige que las modificaciones sobre el código se redistribuyan con la misma licencia. Apache License - Licencia que permite que los trabajos derivados se distribuyan bajo una licencia distinta. Mozilla Public License - Licencia permisiva que permite que los trabajos derivados se distribuyan bajo una licencia distinta. En este enlace se puede ver una comparación más detallada sobre los distintos tipos de licencias software.\nLicencias para proyectos no software # Este tipo de licencias se suelen utilizar para proyectos tales como contenidos (blogs, sitios web,\u0026hellip;), imágenes, vídeos,\u0026hellip; Las más utilizadas son las licencias Creative Commons. Estas licencias permiten la libre distribución de la obra con algunas condiciones:\nSe puede elegir si se permiten compartir adaptaciones de la obra. Dentro de este permiso, se puede especificar si se exige que las modificaciones sean compartidas con la misma licencia. Se puede elegir si se permiten usos comerciales de la obra. En este enlace se puede crear una licencia de Creative Commons con un asistente.\nConsejos para utilizar recursos de terceros # A la hora de incorporar contenidos de terceros a nuestros sitios web hay que tener muy en cuenta bajo qué licencia han sido publicados.\nAlgunos buscadores como Google permiten buscar imágenes especificando el tipo de licencia:\nFigure 3: Búsqueda de imágenes por tipo de licencia\nEn el caso de querer utilizar un determinado recurso y no tener claro bajo qué licencia está sujeto, se debe asumir que está protegido por derechos de autor y que por lo tanto no se puede utilizar. En estos casos es recomendable ponerse en contacto con el autor o el sitio de publicación para pedir permiso explícito. De esta manera se evitarán posibles denuncias.\nReferencias # https://choosealicense.com/ - Asistente para elegir una licencia copyleft. https://commons.wikimedia.org - Recursos multimedia con licencias copyleft "},{"id":8,"href":"/post/disenyo_responsivo/","title":"Diseño responsivo","section":"Posts","content":"En este artículo trataremos los fundamentos del diseño web adaptable o adaptativo (Responsive Web Design en inglés).\nEl diseño web adaptable (también diseño web adaptativo o responsivo; este último calco del inglés responsive web design), es una filosofía de diseño y desarrollo cuyo objetivo es adaptar la apariencia de las páginas web al dispositivo que se esté utilizando para visitarlas. Hoy día las páginas web se ven en multitud de dispositivos como tabletas, teléfonos inteligentes, libros electrónicos, portátiles, PC, etcétera. Además, aún dentro de cada tipo, cada dispositivo tiene sus características concretas: tamaño de pantalla, resolución, potencia de CPU, sistema operativo o capacidad de memoria entre otras. Esta tecnología pretende que con un único diseño web, todo se vea correctamente en cualquier dispositivo. \u0026mdash;Fuente: Wikipedia\nMobile First # La tendencia actual consiste en diseñar siguiendo la filosofía Mobile First, o Móvil primero. Esta teoría aboga por realizar el diseño pensando en dispositivos móviles y posteriormente añadir o modificar características para adaptar el diseño a otro tipo de dispositivos y pantallas.\nLa justificación de esta metodología está en que es necesario abordar en primer lugar un diseño que pueda funcionar en los dispositivos con mayores limitaciones: tamaños pequeños de pantalla, menor potencia de proceso o menor velocidad de conexión. Los dispositivos móviles, pese a su desarrollo en los últimos años, son los más afectados por dichas limitaciones, sobre todo la relacionada con el tamaño de pantalla. Un diseño que se ajuste a estos dispositivos funcionará sin problemas en el resto, por lo que se trata de un diseño universal.\nUna vez garantizado que el diseño base es capaz de funcionar en todos los dispositivos independientemente de sus limitaciones, se puede proceder a enriquecer el diseño de manera que ofrezca más funcionalidades o aproveche mejor las características del resto de dispositivos. Dichas mejoras solo serán visibles en los dispositivos que puedan aprovecharlas y no afectarán negativamente en ningún caso al diseño base.\nPuedes consultar información más detallada sobre la filosofía Mobile First en estos enlaces:\nQué es mobile first y cómo puede mejorar tu posicionamiento Dispositivos y resoluciones de pantalla # A continuación vamos a explicar algunos conceptos relacionados con las resoluciones de pantalla de los dispositivos y cómo afectan al Desarrollo Web, en concreto al diseño con CSS.\nResolución nativa # Cada dispositivo (móvil, tablet, monitor, televisión,\u0026hellip;) tiene una resolución nativa (también llamada física) indicada en sus especificaciones. Esta resolución se expresa en el formato anchura x altura (por ejemplo, 1024 x 768 píxeles).\nResolución CSS (device-width) # Sin embargo, la resolución nativa no se suele utilizar como referencia en CSS en dispositivos que no sean monitores o pantallas convencionales. Esto es debido a que determinados dispositivos, como teléfonos móviles o tablets, tienen un tamaño de pantalla muy pequeño. Por hacernos una idea, el tamaño de letra por defecto en los navegadores es de 16px. Este tamaño de letra puede ser aceptable en un monitor con una resolución 1440x900 con un tamaño de pantalla de 22 pulgadas, pero resultaría muy pequeño en un teléfono de resolución 1920x1024 de 5 pulgadas.\nPor tanto, en lugar de tomar la resolución física o nativa como referencia, se toma como referencia otro valor denominado resolución CSS (anchura CSS, también llamada CSS width o device-width, y altura CSS o CSS height). Esta resolución está ajustada al tamaño del dispositivo, por lo que el tamaño del texto y los elementos en general será adecuado para una correcta visualización.\nEn http://mydevice.io/devices/ puedes consultar una lista con las resoluciones CSS de los dispositivos más conocidos.\nEl ViewPort # Por último, existe un tercer valor de resolución utilizado en el diseño web, que es la resolución del ViewPort. El ViewPort se corresponde con el ancho de la pantalla del navegador web.\nEste concepto fue desarrollado por Apple en el iPhone y tenía como objetivo solucionar el problema del tamaño de la pantalla a la hora de visualizar páginas web. Consiste en hacer creer al navegador que el ancho de la pantalla es mayor que su anchura CSS. De esta manera las páginas web se podrán mostrar exactamente igual que en navegadores de escritorio pero aparecerán con un tamaño más pequeño, como si se hubiera hecho un zoom de alejamiento. De esta manera consiguieron que la navegación a través del móvil fuera igual que la de escritorio, con la pequeña diferencia del zoom.\nFigure 1: Viewport\nEs importante dejar claro que la resolución del ViewPort es distinta de la resolución física y la resolución CSS. En los sistemas Android el ancho es de 800px y en los sistemas iOS es de 980px.\nEtiqueta \u0026lt;meta name=\u0026quot;viewport\u0026quot;\u0026gt; # En el diseño adaptativo se busca que la apariencia visual de la página web esté ajustada al tamaño de la pantalla. Para ello se utiliza la etiqueta meta name=\u0026ldquo;viewport\u0026rdquo;. Esta etiqueta sirve para indicar al navegador qué tamaño debe definir para su ViewPort. En la mayoría de ocasiones utilizaremos la etiqueta de la siguiente manera:\n\u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; Este código indica al navegador que debe utilizar la anchura CSS (width=device-width) como ancho del ViewPort. De esta manera las páginas se adaptarán a una resolución adecuada para el tamaño de pantalla del dispositivo.\n¡IMPORTANTE! Esta etiqueta sólo debe utilizarse con diseños web optimizados para móvil o diseños web adaptativos. Si la página no está adaptada para móvil no se debe usar, ya que se visualizaría de manera incorrecta.\nPuedes consultar más información relacionada con esta etiqueta en este artículo sobre ViewPort en MDN.\nMedia queries # Las media queries son expresiones que se utilizan en CSS3 para identificar el dispositivo al que va dirigido un determinado conjunto de reglas de estilo CSS.\nUna media query es una expresión lógica que sólo puede tomar dos valores: verdadero o falso. Si la expresión es verdadera, el conjunto de reglas de estilo definidas en su interior se aplica; si es falsa, no se aplica.\nCada expresión media query está formada por un tipo de medio (Media Type) y cero o más características del medio para comprobar las características concretas del dispositivo.\nTipos de medio (Media Types) # Un Media Type define un tipo de dispositivo. Los tipos de medio disponibles actualmente son:\nall. Se utiliza para hacer referencia a todos los dispositivos. Si no se indica ningún media type es el que se utiliza por defecto. screen. Se utiliza para hacer referencia a pantallas (móvil, tabletas, ordenadores, portátiles,\u0026hellip;). print. Se utiliza para hacer referencia a impresoras. Define las reglas de estilo que se aplicarán al imprimir la página. speech. Se utiliza para hacer referencia a sintetizadores de voz. Características del medio (Media Features) # Se pueden utilizar expresiones adicionales al Media Type para determinar de manera más concreta las características del dispositivo. Algunas de las características más utilizadas son:\nwidth - Indica la anchura del ViewPort del dispositivo. Sólo se incluyen los dispositivos cuya anchura del ViewPort se corresponda con la indicada. max-width - Indica la anchura máxima del ViewPort del dispositivo. Los dispositivos con una anchura del ViewPort igual o inferior a la indicada estarán incluidos en la regla. min-width - Indica la anchura mínima del ViewPort del dispositivo. Los dispositivos con una anchura del ViewPort igual o superior a la indicada estarán incluidos en la regla. Existe otra propiedad relacionada con la anchura de los dispositivos denominada device-width, pero en el borrador más reciente de la especificación han sido declaradas obsoletas.\nEn este enlace se puede consultar todas las Características del medio disponibles.\nSintaxis # Para definir una Media Query se sigue la siguiente sintaxis en CSS:\n@media mediatype and|not|only (media_feature) { Código CSS; } También es posible definir que una determinada hoja de estilos se aplique para un determinado tipo de medios. En este caso, el código a incluir sería:\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; media=\u0026#34;mediatype and|not|only (media_feature)\u0026#34; href=\u0026#34;estilos.css\u0026#34;\u0026gt; Ejemplo # A continuación se muestra un ejemplo de uso de Media Queries:\n/* Estilos Mobile First: se aplican por defecto a todos los tamaños de pantalla */ /* Como se puede ver, no están dentro de ninguna Media Query */ body { background-color: lightblue; } p { color: black; } /* Estilos para pantallas de anchura CSS mínima 300px */ @media screen and (min-width: 300px) { body { background-color: green; } p { color: white; } } /* Estilos para pantallas de anchura CSS de más de 700px*/ @media screen and (min-width:701px) { body { background-color: red; } p { color: white; } } En el siguiente enlace puedes ver el ejemplo anterior funcionando (cambia el tamaño de la ventana de salida para comprobar los cambios).\nMobile First y Media Queries # Tal como se puede ver en el ejemplo anterior, se ha tenido en cuenta la filosofía Mobile First para realizar el diseño con Media Queries:\nEn primer lugar, se han definido unos estilos de base que no están dentro de ninguna Media Query. Dichos estilos son los estilos que se aplicarán a todos los dispositivos y que deben estar pensados para dispositivos móviles o de pantalla pequeña. En esta sección estará el layout para vista móvil y en general todos los estilos apropiados para dichos dispositivos. Normalmente las distintas secciones de la web (menús, cabeceras, contenido,\u0026hellip;) se suelen disponer en una única columna para favorecer la usabilidad en este tipo de dispositivos. A continuación se ha definido una Media Query con una anchura mínima de 300px. En esa Media Query se incluirán los estilos que se necesiten añadir o cambiar para adecuar la vista a dispositivos con un tamaño de pantalla intermedio. Estos estilos solo serán utilizados por dispositivos con esa anchura mínima de pantalla. Por tanto, será en el interior de esta Media Query donde incluiremos posibles cambios en el layout para cambiar la disposición de los elementos principales de nuestra web y que se vean de otra manera para pantallas de tamaño medio (por ejemplo, capas posicionadas en dos o más columnas). Por último, se ha definido una Media Query con una anchura mínima de 700px. Aquí se incluirán los estilos que se necesiten añadir o cambiar para adecuar la vista a dispositivos con un tamaño de pantalla grande. Algunos consejos importantes a tener en cuenta para diseñar con Media Queries y Mobile First:\nCrear los estilos de base fuera de cualquier Media Query. Crear un layout de columna única para el estilo de base. Dado que HTML posiciona automáticamente los elementos \u0026lt;div\u0026gt; uno debajo de otro, no es necesario utilizar ninguna técnica específica de layout (flexbox, grid) en los estilos de base. Utilizar min-width y no max-width para las Media Queries. De esta manera se asegura realizar los cambios de pantallas más pequeñas a pantallas más grandes. Utilizar tantos cortes de resolución como se necesiten. Normalmente se utilizan 2 ó 3 cortes, pero pueden utilizarse más. En este enlace pueden consultarse los cortes de resolución utilizados por la librería Bootstrap. Si se utiliza solo min-width es necesario recordar que los estilos definidos tanto fuera de las Media Queries como en las Media Queries que hagan referencia a tamaños inferiores se siguen aplicando. A continuación puedes ver un ejemplo con estilos definidos en varias Media Queries (cambia el tamaño de la ventana de salida para ver cómo cambia la apariencia en función de la resolución).\nMás información # En los siguientes enlaces puede consultarse más información sobre Media Queries:\nCSS Media Queries en MDN CSS Media Queries Examples en W3Schools Curiosidad: Modelo de Rejilla # Muchos diseños actuales se basan en el modelo de rejilla. Básicamente consiste en dividir la página en un número de columnas (usualmente 12) y disponer las capas de manera que ocupen un número de columnas determinado. Este tipo de diseños se suele combinar con media queries para realizar diseños responsivos.\nA continuación se muestran dos enlaces con información más detallada sobre este tema:\nTutorial de diseño basado en rejilla. Cómo combinar el diseño en rejilla con media queries para realizar diseños reponsivos. Curiosidad: Font boosting (Chrome Mobile) # El navegador Chrome para móviles cambia el tamaño de la letra de algunos elementos de bloque en función de la altura de los mismos para favorecer su legibilidad. Esta característica hace que los estilos que se muestran no coincidan en ocasiones con los estilos establecidos en las hojas de estilo.\nPara desactivar esta característica basta con especificar una altura (height) o altura máxima (max-height) a la capa en cuestión.\nPara desactivarlo de manera global basta con establecer una altura máxima con un valor muy grande a nivel global.\n1 2 3 html * { max-height:1000000px; } Para más información puedes consultar los siguientes artículos de Stack Overflow:\nhttp://stackoverflow.com/questions/11289166/chrome-on-android-resizes-font http://stackoverflow.com/questions/13430897/how-to-override-font-boosting-in-mobile-chrome Simulación de tamaños de pantalla # Las herramientas de desarrollo de los navegadores incorporan un modo de Vista de Diseño Adaptable para simular cómo se verá la página en distintos tamaños de pantalla:\nResponsive Design View (Firefox) Device Mode (Chrome) Es importante saber que en última instancia el mejor test siempre es comprobar la apariencia visual desde un dispositivo nativo (tablet, teléfono móvil,..).\nEvolución futura # Las tendencias actuales en el campo del diseño adaptativo van enfocadas a personalizar el código que proporciona el servidor en función del tipo de cliente que hace la petición.\nAsí, en lugar de responder a todos los dispositivos con la misma versión de los archivos HTML y CSS (que incluye todas las adaptaciones para todos los dispositivos mediante media queries), el servidor es capaz de detectar el tipo de dispositivo que realiza la petición (móvil, tablet, ordenador,\u0026hellip;) y ofrecerle únicamente el código que necesita. Así, un móvil recibiría únicamente el código CSS optimizado para móvil, sin incluir las media queries correspondientes a tablets u ordenadores.\nDe esta manera se reduce el tamaño de los archivos y se aumenta la velocidad de carga de los sitios.\nReferencias # Guía de RWD en W3Schools Aspectos básicos del diseño web adaptable (Google) Diseño Responsivo (MDN) Responsive Design (MDN) The building blocks of responsive design (MDN) "},{"id":9,"href":"/post/css_fonts/","title":"Fuentes en CSS","section":"Posts","content":"En este artículo se aborda el uso de tipos de letra (fuentes) en CSS: cómo incorporar fuentes desde servidores externos, qué tipos de fuente genéricos existen y cómo establecer tipos de fuentes seguros para que sean compatibles con todos los navegadores y sistemas operativos.\nTipos de fuente # En general podemos distinguir 5 grandes tipos de fuentes:\nSerif Tipo de letra con remates en los extremos de las líneas. Se suele utilizar mucho en textos impresos. Tiene un aspecto visual más formal. Sans-Serif Tipo de letra sin remates. Suele utilizarse para textos en pantalla. Se considera más informal. Monospaciada Tipo de letra monoespaciada: todos los caracteres ocupan el mismo ancho. Se suele utilizar para código. Cursiva Tipo de letra que simula la escritura a mano. Fantasía Tipo de letra que muestra caracteres extraños o personalizados. Figure 1: Tipos de fuente\nFuentes en CSS # En CSS se pueden distinguir dos tipos de fuentes que pueden utilizarse con la propiedad font-family:\nGenéricas Son unos tipos de fuente consideradas seguras, ya que son compatibles con todos los navegadores y sistemas operativos. El tipo de letra que se mostrará corresponderá al tipo de letra configurada por defecto en el sistema correspondiente. Por ejemplo, si un navegador Firefox tiene definida \u0026ldquo;Arial\u0026rdquo; como tipo de letra Sans-Serif predeterminada, un tipo de letra sans-serif en CSS se mostrará en pantalla como \u0026ldquo;Arial\u0026rdquo;. En este enlace se puede ver un ejemplo de los tipos de letra genéricos en CSS. Dichos tipos genéricos son: serif sans-serif monospace cursive fantasy Tipos de letra concretos Por ejemplo, font-family: \u0026quot;Arial\u0026quot;. Hay que tener en cuenta que especificar un tipo de letra concreto implica dar por supuesto que dicho tipo de letra está instalada en el sistema operativo del cliente (a no ser que se importe un tipo de letra desde un archivo o servidor externo, que veremos en un apartado posterior). Si el tipo de letra especificado no está disponible, el navegador mostrará el tipo de letra que tenga configurado por defecto. Además, es casi seguro que distintos sistemas operativos mostrarán las fuentes de manera diferente. Configuración segura de tipos de fuentes # A la hora de definir los tipos de fuente mediante la propiedad font-family es una buena práctica especificar no una, sino varios tipos de fuente separados por comas indicando en último lugar un tipo de fuente genérica. El navegador tratará de cargar el tipo de fuente de la primera opción y si no lo consigue, probará el siguiente. De esta manera garantizamos en última instancia que se mostrará un tipo de fuente adecuado (serif, sans-serif, monospace, cursive o fantasy) independientemente del navegador o sistema operativo utilizado.\nAlgunos ejemplos de tipos de fuente seguros son:\nfont-family: \u0026#34;Times New Roman\u0026#34;, Times, serif; font-family: Arial, Helvetica, sans-serif; font-family: \u0026#34;Courier New\u0026#34;, Courier, monospace; Cargar fuentes desde archivos o URLs # Para incluir una fuente desde un archivo (tanto almacenado en el propio servidor como en una URL ajena) se utiliza la propiedad @font-face de CSS:\n@font-face { font-family: miFuente; src: url(ruta_archivo_fuente.woff); } Una vez importada puede utilizarse así:\ndiv { font-family: miFuente; } Algunos servicios como Google Fonts ofrecen la posibilidad de seleccionar una o varias fuentes para incorporar a nuestra web utilizando etiquetas \u0026lt;link\u0026gt; en el archivo HTML o @import en CSS (este último método es menos aconsejable).\nA continuación se muestra un ejemplo para incorporar la fuente Roboto:\n\u0026lt;link href=\u0026#34;https://fonts.googleapis.com/css?family=Roboto\u0026amp;display=swap\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt; De manera alternativa se puede cargar a través de CSS (menos aconsejable, tal como hemos comentado antes):\n\u0026lt;style\u0026gt; @import url(\u0026#39;https://fonts.googleapis.com/css?family=Roboto\u0026amp;display=swap\u0026#39;); \u0026lt;/style\u0026gt; Si accedemos a la URL definida en la etiqueta \u0026lt;link\u0026gt; o en @import veremos que el código corresponde a código CSS que hace uso de la regla @font-face para cargar las fuentes correspondientes.\nUna vez incluida la etiqueta \u0026lt;link\u0026gt; en el archivo HTML o la regla @import en CSS podremos hacer uso de la fuente en los ficheros CSS de la siguiente manera:\nfont-family: \u0026#39;Roboto\u0026#39;, sans-serif; Más información # Para obtener más información sobre fuentes se puede consultar el artículo \u0026ldquo;Optimización de fuentes web\u0026rdquo; de Google. En él se explica con mayor detalle la teoría relacionada con fuentes, tipos de formatos para almacenar fuentes (formatos woff, woff2 o truetype), compresión o subdivisión de Unicode para seleccionar los caracteres correspondientes a una determinada familia de lenguajes (latino, cirílico, griego,\u0026hellip;).\nReferencias # https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/webfont-optimization?hl=es https://developer.mozilla.org/es/docs/Web/CSS/@font-face https://www.w3schools.com/cssref/css3_pr_font-face_rule.asp https://www.w3.org/Style/Examples/007/fonts.en.html https://stackoverflow.com/questions/14676613/how-to-import-google-web-font-in-css-file https://stackoverflow.com/questions/56141957/difference-between-font-face-and-import-url https://stackoverflow.com/questions/1022695/difference-between-import-and-link-in-css "},{"id":10,"href":"/post/disenyo_formularios/","title":"Diseño de formularios","section":"Posts","content":"En este artículo se analizarán algunas recomendaciones de diseño relacionadas con los formularios web. El objetivo es aprender a diseñar formularios que muestren la información de manera limpia, clara y de forma adaptada a cualquier tipo de dispositivo.\nEstructura y diseño visual (código) # A continuación se muestran algunos consejos relacionados con el código HTML y CSS utilizado en formularios.\nFieldset # La etiqueta \u0026lt;fieldset\u0026gt; se utiliza para agrupar controles relacionados. Se suele utilizar junto con la etiqueta \u0026lt;legend\u0026gt;, que muestra un texto a modo de título.\n\u0026lt;form\u0026gt; \u0026lt;fieldset\u0026gt; \u0026lt;legend\u0026gt;Título\u0026lt;/legend\u0026gt; \u0026lt;!-- Controles del formulario --\u0026gt; \u0026lt;/fieldset\u0026gt; \u0026lt;/form\u0026gt; Agrupación de controles # Los controles de formulario son elementos en línea. Por tanto, para que aparezcan en líneas distintas es conveniente agruparlos mediante etiquetas de bloque. En este punto se puede optar por etiquetas \u0026lt;p\u0026gt; o \u0026lt;div\u0026gt;:\n\u0026lt;form\u0026gt; \u0026lt;fieldset\u0026gt; \u0026lt;legend\u0026gt;Título\u0026lt;/legend\u0026gt; \u0026lt;div\u0026gt;\u0026lt;!-- Control de formulario --\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;\u0026lt;!-- Control de formulario --\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;\u0026lt;!-- Control de formulario --\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/fieldset\u0026gt; \u0026lt;/form\u0026gt; O por listas (ordenadas o desordenadas):\n\u0026lt;form\u0026gt; \u0026lt;fieldset\u0026gt; \u0026lt;legend\u0026gt;Título\u0026lt;/legend\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;!-- Control de formulario --\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;!-- Control de formulario --\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;!-- Control de formulario --\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/fieldset\u0026gt; \u0026lt;/form\u0026gt; En caso de utilizar listas es posible ocultar los puntos mediante el siguiente código CSS:\nform ul, form ol { list-style: none; padding: 0; } Campos # Para identificar los controles se deben utilizar los atributos id y name. El atributo id se utiliza para a programación de cliente (front-end), mientras que el atributo name se utiliza para el envío de los datos al servidor (back-end). Es muy importante tener en cuenta que normalmente hay que utilizar los dos.\n\u0026lt;form\u0026gt; \u0026lt;fieldset\u0026gt; \u0026lt;legend\u0026gt;Título\u0026lt;/legend\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;name\u0026#34; id=\u0026#34;name\u0026#34;\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;lname\u0026#34; id=\u0026#34;lname\u0026#34;\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;input type=\u0026#34;email\u0026#34; name=\u0026#34;email\u0026#34; id=\u0026#34;email\u0026#34;\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/fieldset\u0026gt; \u0026lt;/form\u0026gt; Etiquetas (labels) # Para mostrar la información asociada a un control se debe utilizar la etiqueta \u0026lt;label\u0026gt;. Dicha etiqueta utiliza el atributo for para indicar el control al que va asociado. El valor del atributo for debe ser el valor del atributo id del control correspondiente.\nEl uso de etiquetas tiene varias ventajas:\nEl usuario puede pulsar con el ratón sobre la etiqueta y activar el control asociado. Dispositivos como lectores de pantalla o lectores braille necesitan las etiquetas para poder mostrar la información asociada al control. \u0026lt;form\u0026gt; \u0026lt;fieldset\u0026gt; \u0026lt;legend\u0026gt;Título\u0026lt;/legend\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt; \u0026lt;label for=\u0026#34;name\u0026#34;\u0026gt;Nombre\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;name\u0026#34; id=\u0026#34;name\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;label for=\u0026#34;lname\u0026#34;\u0026gt;Apellidos\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;lname\u0026#34; id=\u0026#34;lname\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;label for=\u0026#34;email\u0026#34;\u0026gt;Email\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;email\u0026#34; id=\u0026#34;email\u0026#34;\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/fieldset\u0026gt; \u0026lt;/form\u0026gt; Alineación # La alineación de controles o etiquetas puede conseguirse utilizando cualquiera de las técnicas vistas en el artículo de técnicas para crear layouts.\nEn el caso concreto de formularios es recomendable utilizar flexbox o display: inline-block definiendo una anchura igual para las etiquetas junto con otra anchura igual para los controles. La separación entre ambos puede realizarse utilizando el margen.\nA continuación se muestra un ejemplo del código utilizando display: inline-block:\nlabel { display: inline-block; width: 7em; } input { display: inline-block; width: 9em; } Es posible (y recomendable) utilizar etiquetas \u0026lt;span\u0026gt; para agrupar etiquetas y controles y así poderlos procesar correctamente en CSS.\n\u0026lt;form\u0026gt; \u0026lt;fieldset\u0026gt; \u0026lt;legend\u0026gt;Título\u0026lt;/legend\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li class=\u0026#34;grupo-control\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;etiqueta\u0026#34;\u0026gt;\u0026lt;label for=\u0026#34;name\u0026#34;\u0026gt;Nombre\u0026lt;/label\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;control\u0026#34;\u0026gt;\u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;name\u0026#34; id=\u0026#34;name\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;grupo-control\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;etiqueta\u0026#34;\u0026gt;\u0026lt;label for=\u0026#34;lname\u0026#34;\u0026gt;Apellidos\u0026lt;/label\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;control\u0026#34;\u0026gt;\u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;lname\u0026#34; id=\u0026#34;lname\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;grupo-control\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;etiqueta\u0026#34;\u0026gt;\u0026lt;label for=\u0026#34;email\u0026#34;\u0026gt;Email\u0026lt;/label\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;control\u0026#34;\u0026gt;\u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;email\u0026#34; id=\u0026#34;email\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/fieldset\u0026gt; \u0026lt;/form\u0026gt; Partiendo del código anterior, se muestra a continuación el código necesario para alinear los campos utilizando flexbox:\n.grupo-control { display: flex; } .etiqueta { flex: 1 1 0; } .control { flex: 2 1 0; } input { width: 100%; margin: 0; padding: 0; } Pistas (Placeholders) # Es posible utilizar pistas para indicar al usuario qué información debe introducir en cada campo del formulario. Para ello se puede utilizar el atributo placeholder.\n\u0026lt;form\u0026gt; \u0026lt;fieldset\u0026gt; \u0026lt;legend\u0026gt;Título\u0026lt;/legend\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt; \u0026lt;span class=\u0026#34;etiqueta\u0026#34;\u0026gt;\u0026lt;label for=\u0026#34;name\u0026#34;\u0026gt;Nombre\u0026lt;/label\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;control\u0026#34;\u0026gt;\u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;name\u0026#34; id=\u0026#34;name\u0026#34; placeholder=\u0026#34;Nombre\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;span class=\u0026#34;etiqueta\u0026#34;\u0026gt;\u0026lt;label for=\u0026#34;lname\u0026#34;\u0026gt;Apellidos\u0026lt;/label\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;control\u0026#34;\u0026gt;\u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;lname\u0026#34; id=\u0026#34;lname\u0026#34; placeholder=\u0026#34;Apellidos\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;span class=\u0026#34;etiqueta\u0026#34;\u0026gt;\u0026lt;label for=\u0026#34;email\u0026#34;\u0026gt;Email\u0026lt;/label\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026#34;control\u0026#34;\u0026gt;\u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;email\u0026#34; id=\u0026#34;email\u0026#34; placeholder=\u0026#34;Email\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/fieldset\u0026gt; \u0026lt;/form\u0026gt; Validación # Los formularios pueden ser validados tanto en el cliente como en el servidor. Suele ser una buena práctica utilizar ambas formas de validación:\nLa validación en servidor es fundamental, ya que siempre es necesario verificar los datos que recibe la aplicación para evitar errores, código malicioso o incompatibilidad con los tipos de datos definidos en la base de datos. La validación en cliente no es obligatoria, aunque ofrece varias ventajas, como mejorar la experiencia de usuario, optimizar la cantidad de datos utilizada en la conexión o disminuir la carga de proceso del servidor. La utilización de HTML5 junto con los navegadores actuales permiten incorporar validación en entorno de cliente de manera muy sencilla. Algunas de las recomendaciones a seguir son:\nUtilizar las etiquetas \u0026lt;input\u0026gt; definidas en HTML5: \u0026lt;input type=\u0026quot;date\u0026quot;\u0026gt;, \u0026lt;input type=\u0026quot;email\u0026quot;\u0026gt;, \u0026lt;input type=\u0026quot;number\u0026quot;\u0026gt;,\u0026hellip; Más información sobre etiquetas input. Utilizar el atributo required para indicar que un campo es obligatorio. Utilizar atributos de validación específicos: min, max, minlength, maxlength, pattern,\u0026hellip; Utilizar mensajes de error personalizados (requiere JavaScript). Utilizar las pseudo-clases :valid y :invalid de CSS para personalizar la apariencia visual de los campos correctos o incorrectos. Puede consultarse más información sobre validación en este artículo de MDN sobre validación de formularios.\nRelleno automático de campos # La mayoría de los navegadores permiten almacenar valores introducidos en formularios anteriores y sugerir posibles valores a la hora de rellenar el formulario actual. Para ello se puede utilizar la característica de autocomplete.\nEjemplo completo # A continuación puedes ver un ejemplo de formulario utilizando las recomendaciones descritas.\nUsabilidad y accesibilidad # Alineación de etiquetas # Las etiquetas de los formularios suelen colocarse arriba o a la izquierda de los controles. Cuando se colocan a la izquierda, pueden alinearse a la izquierda o a la derecha. Cada una de estas opciones tiene sus ventajas e inconvenientes.\nArriba Izquierda Derecha Útil para tipos de datos conocidos X Procesamiento rápido X X No problemas con etiquetas largas X X Asociación etiqueta-control clara X Ocupa poco espacio vertical X X Favorece el escaneo de etiquetas X Útil para tipos de datos desconocidos X Datos obligatorios y opcionales # Se debe minimizar el número de datos opcionales. Si la mayoría de datos son obligatorios: indicar los opcionales. Si la mayoría de datos son opcionales: indicar los obligatorios. Es mejor utilizar indicadores mediante texto; también se puede utilizar * para los campos obligatorios. Se deben asociar los indicadores con las etiquetas. Longitud de los campos # El tamaño de los campos puede ofrecer información sobre su contenido. Muchos tamaños: ruido adicional En caso de duda, tamaño igual para todos los campos. Acciones # Es recomendable mostrar el mínimo número de acciones posibles (idealmente sólo 1). En caso de mostrar más de una acción, diferenciar visualmente la opción principal de las secundarias. Ayuda # Se debe minimizar la cantidad de ayuda mostrada. En caso de necesitar instrucciones, mostrar la ayuda adosada a los campos que la necesiten (ayuda dinámica). Entrada de datos # Se debe mostrar claramente el camino a seguir para completar el formulario. En caso de que el formulario sea muy largo, se debe ofrecer la posibilidad de salvar el progreso. Es conveniente permitir la entrada flexible de datos (por ejemplo, en números de teléfono: 999-112233, 999112233, 999 11 22 33, 999 112 233, etc.). Control por teclado # Se debe tener en cuenta el uso del teclado para rellenar formularios. Para ello puede utilizarse el atributo tabindex. Retroalimentación # Se debe utilizar validación automática en campos con alta tasa de error. Es recomendable utilizar sugerencias para evitar errores. Siempre se debe mostrar un mensaje cuando se envíe un formulario indicando si la acción ha tenido éxito o si se ha producido un error. Errores # Se debe comunicar claramente que ha ocurrido un error: en la parte superior de la página utilizando contraste visual. Además, se debe indicar qué campos son los que contienen errores. Progreso de envío # Es recomendable mostrar indicaciones de las acciones en progreso. Es muy recomendable desactivar el botón de envío después de que el usuario lo haya pulsado. De esta manera evitamos que se produzcan envíos duplicados. Envío # Se debe mostrar claramente si los datos se han enviado con éxito. Se debe indicar alguna referencia a la acción que se ha realizado: actualización, creación de información nueva, pago,\u0026hellip; Referencias # Recomendaciones para diseño de formularios (en inglés) Consejos de usabilidad de formularios (en inglés) "},{"id":11,"href":"/post/tecnicas_layout/","title":"Técnicas para crear layouts","section":"Posts","content":"En la actualidad existen muchas maneras de crear layouts utilizando CSS. A las técnicas tradicionales (float, inline-block) se suman otras nuevas aportadas por CSS3, como flexbox o CSS Grid Layout.\nA continuación veremos las principales técnicas de creación de layouts utilizadas en el diseño web.\nFloat # Se utilizan para layouts que no necesitan centrado vertical ni alturas de capas iguales.\nVentajas:\nMétodo más popular. Al ser el método más popular, los fallos que se producen están muy bien documentados y se han desarrollado muchos métodos para corregirlos. Desventajas:\nNecesitan ser reseteados (clearfix). Si se utilizan media queries para personalizar la apariencia en función del dispositivo será necesario hacer un clear para cada adaptación. No se pueden alinear en vertical. Las alturas de las capas no son iguales. Dependen del orden en que aparezcan las capas en el HTML. Inline-block # Se utilizan cuando se necesitan layouts con las siguientes características:\nSitios que necesitan alineación vertical. Para evitar tener que realizar el clear de los floats cuando se utilizan media queries. Para realizar menús horizontales utilizando listas. Ventajas:\nPosibilidad de alineación vertical. No necesitan hacer clear en diseños complejos adaptados a muchos dispositivos con media queries. Desventajas:\nLas alturas de las capas no son iguales. Dependen del orden en que aparezcan las capas en el HTML. Tienen un fallo que consiste en crear un espacio en blanco adicional (whitespace bug) entre los elementos. La solución si utilizamos listas consiste en utilizar tipos de documento HTML5 y no cerrar los elementos \u0026lt;li\u0026gt;. En este enlace se muestra el problema. Ejemplo de galería con inline-block: http://karenmenezes.com/inlineblockgrid/\nDisplay table # La propiedad display: table automáticamente transforma la apariencia de una capa en la de una tabla. De esta manera se consigue un diseño basado en columnas de manera muy sencilla sin tener que utilizar tablas reales (que, recordemos, no son recomendables).\nSin embargo, para tener un control total es necesario replicar la estructura de una tabla utilizando divs, por lo que se termina cayendo en el mismo error que al diseñar utilizando tablas.\n\u0026lt;div class=\u0026#34;tableWrap\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;tableBlock\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;tableRow\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;tableCell\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;tableCell\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;tableCell\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;tableRow\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;tableCell\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;tableCell\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;tableCell\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Ventajas:\nPosibilidad de alineación vertical. Permite crear capas de alturas iguales. Desventajas:\nEs necesario crear \u0026lt;div\u0026gt; adicionales para simular la estructura de las tablas. No obstante, la especificación indica que no es obligatorio. Dependen del orden en que aparezcan las capas en el HTML. Para separar las celdas no se pueden utilizar los márgenes: hay que utilizar la propiedad border-collapse del elemento padre. Es posible que el contenido traspase los límites de las celdas. Es difícil de adaptar para crear diseños responsivos con varios puntos de ruptura. Problemas con IE6 y IE7. Cajas Flexibles (FlexBox) # FlexBox ofrece un mecanismo muy completo para realizar layouts. Tiene una gran variedad de opciones y es muy versátil. En este videotutorial sobre Flexbox se explica su funcionamiento.\nLos siguientes recursos también son muy interesantes:\nhttps://css-tricks.com/snippets/css/a-guide-to-flexbox/ https://developer.mozilla.org/es/docs/Web/Guide/CSS/Cajas_flexibles http://demo.agektmr.com/flexbox/ Ventajas:\nIndependencia del orden en que aparezcan las capas en el HTML. Elimina la necesidad de utilizar JavaScript para esto. Ofrecen alineación vertical. Permiten crear capas con la misma altura. Permiten la estructura en filas o columnas de manera sencilla. Ofrecen una gran flexibilidad en cuanto a las opciones a utilizar. Las cajas pueden ocupar automáticamente el espacio disponible, crecer o menguar a petición. Desventajas:\nExiste una especificación inicial que ha quedado desfasada (hay que tener cuidado al buscar tutoriales en Internet). La sintaxis es algo compleja. Es necesario utilizar prefijos para soportar todos los navegadores. No es compatible con IE9 y anteriores. Grid layout # Su funcionamiento consiste en definir una serie de zonas dispuestas a modo de rejilla para a continuación asignar cada capa o sección a la zona correspondiente. En este videotutorial sobre CSS Grid se explica su funcionamiento.\nTiene múltiples ventajas, entre las que destacan las siguientes:\nEliminación total de la necesidad de definir capas contenedoras. Bastará con tener una capa para cada área independiente de la página. Independencia del orden en que aparezcan las capas en el HTML. Independencia completa entre HTML y presentación visual. Para aprender más sobre Grid Layout puedes consultar:\nhttps://css-tricks.com/snippets/css/complete-guide-grid/ https://www.w3schools.com/css/css_grid.asp https://developer.mozilla.org/es/docs/Web/CSS/CSS_Grid_Layout/Conceptos_B%C3%A1sicos_del_Posicionamiento_con_Rejillas https://developer.mozilla.org/es/docs/Web/CSS/grid-template-areas Algunos consejos de diseño # Los bloques que aparecen uno debajo del otro no presentan problemas: se muestran correctamente si son display: block (recordemos que estos elementos introducen saltos de línea, por lo que se muestran uno a continuación del otro). El problema aparece cuando tenemos capas que deben aparecer a la derecha o izquierda de otras. En ese caso tendremos que utilizar alguno de los métodos propuestos. La manera más sencilla de diseñar el layout consiste en hacer agrupaciones por filas o columnas: Se deben buscar las filas que lleguen a los extremos de las capas contenedoras. Dentro de cada fila se procederá a agrupar por columnas que lleguen a su vez a los extremos de los contenedores. Se continuará de esta manera (filas, columnas,\u0026hellip;) hasta completar el diseño. Figure 1: Agrupación por filas y columnas\nPor último, es recomendable pensar en el layout más adecuado para dispositivos móviles o pantallas pequeñas. Este tema será abordado con más detalle en otros artículos.\n"},{"id":12,"href":"/post/tipos_layout/","title":"Tipos de layouts","section":"Posts","content":"El layout o estructura de un interfaz web es la manera de organizar o disponer los elementos visuales en la página. El diseño del layout determina la posición de cada uno de los elementos que componen el interfaz web (cabecera, menús, banners, contenido, etc.).\nAdemás, el diseño del layout comprende también una serie de decisiones que afectan a las siguientes características:\nTamaño de los márgenes. Tamaño y posición de imágenes y figuras. Número de columnas (o áreas) en que se divide la página. Áreas dejadas en blanco intencionadamente. Santo Grial # Uno de los patrones de diseño más utilizados es un diseño formado por varias (normalmente tres) columnas, con el contenido principal ocupando una de ellas (normalmente en el centro) y el resto de elementos (menús, banners,\u0026hellip;) en las otras columnas. Las columnas idealmente deben tener la misma altura independientemente de su contenido y opcionalmente pueden tener bordes o colores de fondo diferenciados.\nFigure 1: Diseño de Santo Grial\nAunque parece sencillo de conseguir, no hay ninguna solución óptima para este diseño. Todas ellas tienen algún inconveniente:\nVisualización incorrecta en algún navegador. Utilización de muchas etiquetas HTML. Utilización de etiquetas HTML sin significado semántico (es decir, que se utilicen no para estructurar el contenido, sino para alterar la apariencia visual). Adaptación incorrecta en dispositivos móviles. Necesidad de utilizar lenguaje de script. Métodos antiguos # Tablas # Problemas semánticos. Mezcla de estructura (HTML) con presentación visual. Difícil de mantener. Problemas con lectores de pantalla. Problemas de tiempo de respuesta de los navegadores. Figure 2: Diseño basado en tablas\nPosicionamiento absoluto # Rígido e inflexible. Utilizado para versiones que deban ser impresas Unidades de medida absolutas (cm, mm,\u0026hellip;). Anchura fija # Muy popular. Se crea una capa contenedora que alberga todo el contenido de la página. Se asigna una anchura fija al contenedor: típicamente un tamaño de 980px, 960px o 760px. El contenedor se centra automáticamente cuando se muestra en una pantalla grande. Aparece una barra de desplazamiento horizontal cuando se muestra en una pantalla pequeña. Utiliza el píxel como unidad de medida principal. Ventajas:\nAjuste perfecto. Son sitios que hacen uso de gran cantidad de imágenes y estructuras muy complejas. Necesitan controlar exactamente el tamaño de las capas para que las imágenes acoplen perfectamente. Fácil de desarrollar y mantener. Desventajas:\nPoco usabilidad en pantallas pequeñas. No se adaptan correctamente a dispositivos móviles. No se adaptan correctamente frente a un aumento de zoom o aumento del tamaño del texto. Diseño responsivo # Los métodos actuales de diseño de layouts suelen tener las siguientes características:\nNo utilizan anchuras fijas. Se adaptan correctamente a pantallas pequeñas y grandes. Utilizan unidades CSS relativas (ems, rems, porcentajes, valores mínimos y máximos,\u0026hellip;). Utilizan media queries CSS3 para proporcionar versiones distintas a cada dispositivo en función de su resolución de pantalla. Ventajas:\nMuy buena experiencia de uso independientemente del dispositivo o tamaño de pantalla elegido. Desventajas:\nTodos los dispositivos reciben todo el código independientemente de si lo van a utilizar o no. Difícil de desarrollar y testear. No hay un control perfecto a nivel de píxel: por tanto, puede ser difícil adaptar imágenes de tamaño fijo. Ejemplos:\nhttp://designmodo.com/responsive-design-examples/ http://seesparkbox.com/ Conclusiones # Independientemente del modelo de layout elegido, el objetivo que se persigue es:\nProporcionar a los usuarios una buena experiencia de uso. Servir una página web que funcione y se comporte de manera óptima independientemente del dispositivo o tamaño de pantalla utilizado sin comprometer la experiencia de uso. "},{"id":13,"href":"/post/estrategias_diseno_css/","title":"Estrategias de diseño con CSS","section":"Posts","content":"En ocasiones resulta difícil pensar en cómo abordar el diseño con CSS. Las recomendaciones actuales van en la línea de priorizar el uso de clases para poder utilizarlas dentro de los archivos HTML. Dentro de esta recomendación nos encontramos con dos posibilidades: priorizar el diseño de componentes o priorizar el diseño de clases de utilidades.\nDiseño basado en componentes # Esta filosofía de diseño prioriza el desarrollo de clases CSS que hagan referencia a componentes creados en HTML. Un componente puede ser una tarjeta, un menú, un formulario o un botón. De esta manera tendríamos CSS como el siguiente:\n.card { background: white; border: 1px solid grey; text-align: justify; } .card--left { text-align: left; } .card--right { text-align: right; } .tooltip { background: black; color: white; text-align: center; } Como podemos ver, las clases CSS hacen referencia a componentes que serán creados en HTML.\nDentro de este tipo de diseño podemos distinguir dos enfoques: el primero sería la creación de clases CSS anidadas:\n\u0026lt;div class=\u0026#34;autor\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;contenido\u0026#34;\u0026gt; \u0026lt;h2 class=\u0026#34;nombre\u0026#34;\u0026gt;Juan Gómez\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; .autor { background-color: white; border: 1px solid hsl(0,0%,85%); border-radius: 4px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); overflow: hidden; } .autor img { display: block; width: 100%; height: auto; } .autor .contenido { padding: 1rem; } .autor .nombre { font-size: 1.25rem; color: rgba(0,0,0,0.8); } El segundo sería la creación de clases CSS independientes (uno de los ejemplos más utilizados es la metodología BEM):\n\u0026lt;div class=\u0026#34;autor\u0026#34;\u0026gt; \u0026lt;img class=\u0026#34;autor__img\u0026#34; src=\u0026#34;\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;autor__contenido\u0026#34;\u0026gt; \u0026lt;h2 class=\u0026#34;autor__nombre\u0026#34;\u0026gt;Juan Gómez\u0026lt;/h2\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; .autor { background-color: white; border: 1px solid hsl(0,0%,85%); border-radius: 4px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); overflow: hidden; } .autor__img { display: block; width: 100%; height: auto; } .autor__contenido { padding: 1rem; } .autor__nombre { font-size: 1.25rem; color: rgba(0,0,0,0.8); } Ventajas: # Se prioriza el significado semántico de las clases: los nombres de clase hacen referencia a entidades con significado dentro de la estructura HTML, ya que hacen referencia a componentes con una funcionalidad definida. Produce un código fácil de leer. Se crea código estructurado en función de los distintos componentes que tenga la página. Desventajas: # Las clases van asociadas a una determinada estructura HTML, por lo que resulta difícil reutilizarlas. La creación variaciones de un tipo de componente es complicada: normalmente supone duplicar código CSS, modificar el HTML o crear clases que deshagan las acciones creadas por la clase original. Se favorece el paradigma de herencia sobre el de composición: normalmente acaban creándose múltiples niveles de abstracciones que se van heredando para dar servicio a todos los posibles casos. Diseño basado en clases de utilidades # Por el contrario, este paradigma de diseño prioriza el desarrollo de clases CSS que implementen pequeñas funcionalidades que puedan ser reutilizadas por todos los elementos o componentes de la página. Un ejemplo de código sería el siguiente:\n/* Font sizes */ .font-13 { font-size: 13px } .font-16 { font-size: 16px } ... /* Font styles */ .font-bold { font-weight: bold } .font-italic { font-style: italic } ... /* Font colors */ .font-purple { color: purple } ... Como podemos ver, las clases CSS hacen referencia a características genéricas no asociadas a ningún componente o estructura HTML específica: pueden ser utilizadas por multitud de ellos (enlaces, encabezados, menús, botones,\u0026hellip;).\nVentajas: # El código CSS resulta altamente reutilizable, ya que las clases no suelen estar asociadas a estructuras HTML determinadas o con función específica. Favorece el patrón de composición sobre herencia, por lo que la creación de componentes ligeramente distintos de los originalmente planteados resulta más fácil que con el patrón de diseño basado en componentes. Desventajas: # Aumenta el número de clases a aplicar en etiquetas HTML, por lo que el código HTML puede resultar más difícil de leer: \u0026lt;h2 class=\u0026#34;font-16 font-bold font-purple\u0026#34;\u0026gt;Game of Thrones\u0026lt;/h2\u0026gt; Aumenta el número de clases disponibles, por lo que puede resultar difícil conocerlas todas o saber cuál aplicar. Conclusión # Como hemos podido ver, tenemos dos posibilidades de enfocar el diseño de clases en CSS. ¿Cuál deberíamos elegir? La respuesta depende por supuesto de las metodologías de trabajo, el tipo de proyecto y las elecciones personales. Quizá la mejor opción sería optar por una aproximación del tipo clases de utilidades Primero y proceder a una posterior abstracción en forma de componentes cuando se vean patrones repetidos.\nReferencias # http://getbem.com/ https://frontstuff.io/in-defense-of-utility-first-css https://adamwathan.me/css-utility-classes-and-separation-of-concerns/ "},{"id":14,"href":"/post/variables_preprocesadores_css/","title":"Variables y preprocesadores CSS","section":"Posts","content":"En los últimos años han aparecido una gran cantidad de preprocesadores CSS que permiten incorporar técnicas de lenguajes de programación (variables, anidamiento, mixins,\u0026hellip;) a la creación de hojas de estilo. La desventaja que tienen es que el código debe compilarse para generar CSS válido que pueda ser utilizado por el navegador.\nFrente a esto, es interesante conocer que CSS permite definir variables que pueden ser reutilizadas en todo el documento, proporcionando una alternativa sencilla y estándar, aunque lógicamente menos potente.\nPreprocesadores CSS # Los preprocesadores CSS permiten utilizar un lenguaje especial para definir código CSS. Dicho lenguaje depende del preprocesador elegido y suele ser muy parecido al CSS convencional.\nEl lenguaje debe ser compilado a CSS para que los navegadores puedan usarlo. A continuación podemos ver un ejemplo de SASS:\n$font-stack: Helvetica, sans-serif $primary-color: #333 body font: 100% $font-stack color: $primary-color nav ul margin: 0 padding: 0 list-style: none li display: inline-block a display: block padding: 6px 12px text-decoration: none Y el resultado de la compilación en CSS:\nbody { font: 100% Helvetica, sans-serif; color: #333; } nav ul { margin: 0; padding: 0; list-style: none; } nav li { display: inline-block; } nav a { display: block; padding: 6px 12px; text-decoration: none; } A continuación se enumeran algunos de los preprocesadores CSS más utilizados son:\nSASS LESS PostCSS Stylus Variables CSS # Una de las características quizá más interesantes de utilizar un preprocesador CSS es la posibilidad de crear variables que puedan ser reutilizadas en el resto de la hoja de estilos. De esta manera se pueden definir determinados valores (por ejemplo, colores) para poder utilizarlos en múltiples clases CSS. Pensemos por ejemplo en la creación de una biblioteca de componentes CSS personalizados: puede ser interesante parametrizar determinados aspectos como el color o el color de fondo para diseñar distintos componentes (botones, menús, tablas,\u0026hellip;) que muestren un aspecto visual común y que permitan una posterior personalización.\nEs posible hacer uso de esta característica sin tener que recurrir a un preprocesador haciendo uso de las propiedades personalizadas CSS. A continuación se muestra un ejemplo:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 :root { --color-fondo-principal: brown; } .uno { color: white; background-color: var(--color-fondo-principal); margin: 10px; width: 50px; height: 50px; display: inline-block; } .dos { color: white; background-color: var(--color-fondo-principal); margin: 10px; width: 75px; } .tres { color: white; background-color: var(--color-fondo-principal); margin: 10px; width: 100px; } "},{"id":15,"href":"/post/minimizacion_css/","title":"Minimización de hojas de estilo","section":"Posts","content":"La minimización de código tiene como objetivo reducir el tamaño del archivo eliminando caracteres innecesarios. Se utiliza en diseño web para reducir el tamaño de los archivos CSS y JavaScript y así reducir el tiempo de carga del sitio web.\nEl proceso de minimización es distinto del de compresión, ya que el archivo minimizado es totalmente compatible con el original y no requiere de un proceso previo (descompresión) para su correcta interpretación.\nEl procedimiento consiste en eliminar espacios en blanco innecesarios, saltos de línea y comentarios. En ocasiones también se renombran los nombres de variables (cambiándolas por otros más cortos, como letras) y se optimiza el código eliminando las instrucciones innecesarias o redundantes.\nHerramientas # Existen varias herramientas para minimizar código. En concreto, para CSS podemos utilizar algunos de los siguientes servicios online:\nhttps://jakubpawlowicz.github.io/clean-css/ - Optimizador CSS: además de minimizar es capaz de eliminar reglas duplicadas o reestructurar el código http://cssminifier.com/ http://csscompressor.com/ http://gpbmike.github.io/refresh-sf/ "},{"id":16,"href":"/post/unidades-medida-css/","title":"Unidades de medida","section":"Posts","content":"En este artículo estudiaremos las unidades de medida más utilizadas en CSS, así como las diferencias más importantes entre las unidades relativas y las unidades absolutas.\nCSS define distintas unidades para representar medidas. Dichas unidades se pueden consultar en el siguiente enlace: unidades CSS 2.1.\nCSS 3 define algunas unidades adicionales: unidades CSS 3.\nEl uso de una u otra unidad vendrá marcado por el tipo de pantalla objetivo (referencia: aquí):\nRecomendado Uso ocasional No recomendado Pantalla em, px, % ex pt, cm, mm, in, pc Impresión em, cm, mm, in, pt, pc, % px, ex A continuación veremos un pequeño resumen de las características de las unidades más utilizadas.\nUnidades absolutas # Las unidades absolutas se pueden consultar en este enlace: unidades absolutas.\nunidad definición ‘cm’ centímetro ‘mm’ milímetros ‘in’ pulgadas (1in = 2.54cm) ‘px’ píxeles (1px = 1/96in) ‘pt’ puntos (1pt = 1/72in = 0.35mm) ‘pc’ picas (1pc = 12pt = 4.23mm) La relación entre unidades de medida es la siguiente: 1in = 2.54cm = 25.4mm = 72pt = 6pc\nEn general se utilizarán las unidades absolutas cuando se pretenda determinar el tamaño exacto que tendrán los elementos. Estas unidades son especialmente útiles para definir el tamaño de imágenes o capas que queremos que ocupen exactamente el tamaño de una imagen.\nEstas unidades son también útiles para definir estilos para hojas impresas (por ejemplo, para especificar el tamaño de una fuente en puntos).\nEl inconveniente de estas unidades es que no se adaptan bien a tipos de pantalla distintos (móviles, tabletas,\u0026hellip;) o de distintos tamaños.\nUnidades relativas # Las unidades relativas se pueden consultar en este enlace: unidades relativas. Las unidades relativas expresan tamaños en función de otros.\nunidad relativa a ‘em’ tamaño de letra del elemento ‘ex’ altura del carácter \u0026lsquo;x\u0026rsquo; del tipo de letra del elemento ‘ch’ anchura del carácter \u0026lsquo;0\u0026rsquo; del tipo de letra del elemento ‘rem’ tamaño de letra del elemento raíz ‘vw’ 1% de la anchura del viewport ‘vh’ 1% de la altura del viewport ‘vmin’ 1% de la dimensión más pequeña del viewport ‘vmax’ 1% de la dimensión más alta del viewport La ventaja de utilizar estas unidades es que se adaptan muy bien a distintos tipos y tamaños de pantalla.\nEl valor de las medidas relativas no se hereda directamente, sino que se hereda su valor real una vez calculado.\nA continuación estudiaremos las características de las unidades más utilizadas.\nUnidad \u0026rsquo;em\u0026rsquo; # Esta unidad hace referencia al tamaño de letra calculado heredado por el elemento. Por tanto, para calcular el valor real aplicado habrá que determinar los valores que se van heredando de los elementos contenedores. A continuación se muestra un ejemplo:\nhtml { font-size: 12px; text-indent: 1em; /* 1em = 12px */ } p { /* Hereda 1em = 12px; */ font-size: 0.5em; /* Tamaño = 6px */ } p span { /* Hereda 1em = 6px */ font-size: 0.5em; /* Tamaño = 3px */ } Unidad \u0026lsquo;rem\u0026rsquo; # Esta unidad tiene una referencia fija, que es el tamaño de letra definido en el elemento raíz. Por tanto, para calcular el valor real aplicado simplemente hay que mirar el elemento raíz. A continuación se muestra un ejemplo:\nhtml { font-size: 12px; text-indent: 1rem; /* 1em = 12px */ } p { font-size: 0.5rem; /* Tamaño = 6px */ } p span { font-size: 0.5rem; /* Tamaño = 6px */ } Estas unidades simplifican los cálculos al tener una referencia fija (no hay que ir calculando valores heredados de los elementos contenedores).\nPorcentaje # El porcentaje suele tomarse como una unidad relativa más. Un porcentaje de un 100% hace referencia al tamaño calculado del elemento contenedor (un tamaño de un 100% en un tipo de letra hace referencia al tamaño del tipo de letra aplicado en el elemento contenedor). Por tanto, para calcular el valor real aplicado habrá que determinar los valores que se van heredando de los elementos contenedores. A continuación se muestra un ejemplo:\nbody { width: 1024px; /* 100% = 1024px */ } div { /* Hereda 100% = 1024px */ width: 50%; /* Anchura = 512px */ } div div { /* Hereda 100% = 512px */ width: 50%; /* Anchura = 256px */ } Unidades \u0026lsquo;vw\u0026rsquo;, \u0026lsquo;vh\u0026rsquo;, \u0026lsquo;vmin\u0026rsquo; y \u0026lsquo;vmax\u0026rsquo; # Estas unidades hacen referencia al tamaño del viewport. CSS define el viewport como el tamaño del área que se utiliza para representar la página web. Coincide con el \u0026lt;body\u0026gt; incluyendo los márgenes. Es importante indicar que en los navegadores móviles el viewport tiene un tamaño superior al tamaño real de la pantalla: es por ello que las páginas web se muestran completas como vistas desde un zoom de alejamiento (este tema será tratado con más detalle más adelante).\nEstas unidades tienen una referencia fija, que es el ancho (\u0026lsquo;vw\u0026rsquo;), alto (\u0026lsquo;vh\u0026rsquo;), dimensión más pequeña (\u0026lsquo;vmin\u0026rsquo;) o dimensión más grande (\u0026lsquo;vmax\u0026rsquo;) del viewport. Por tanto, para calcular el valor real aplicado simplemente hay que mirar el elemento raíz. A continuación se muestra un ejemplo:\n/* Suponemos que el ancho de la pantalla del dispositivo es de 1024px, por lo que 100vw = 1024px */ div { /* 1vw = 1024/100 */ width: 50vw; /* Anchura = 512px */ } div div { /* 1vw = 1024/100 */ width: 50vw; /* Anchura = 512px */ } Como ocurre con las unidades \u0026lsquo;rem\u0026rsquo;, las unidades relativas al viewport simplifican los cálculos al tener una referencia fija.\n"},{"id":17,"href":"/post/modelo-caja-css/","title":"Notas sobre el modelo de cajas en CSS","section":"Posts","content":"El modelo de caja de CSS tiene como objetivo definir el comportamiento de los elementos en HTML. En concreto define el contenido, relleno, bordes y márgenes. Se utiliza en gran medida para disponer los elementos en una estructura determinada (el denominado layout). En este artículo veremos un par de características relacionadas con él que pueden ser de mucha utilidad: la propiedad box-sizing y el comportamiento de la anchura y altura de las cajas.\nLa propiedad box-sizing # Existe una propiedad en CSS3 denominada box-sizing que permite cambiar la definición de anchura para ésta que incluya el contenido, relleno (padding) y bordes (no se incluye el margen). En este enlace puedes consultar su funcionamiento. De esta manera, al utilizar el código box-sizing: border-box;, no habrá que hacer sumas para calcular el ancho total de las cajas.\nEs habitual utilizar este código si se va a usar esta propiedad:\n* { box-sizing: border-box; } Altura y anchura de los elementos # La utilización de porcentajes en la definición de anchuras y alturas tiene algunas diferencias:\nLa anchura de los elementos es independiente de su contenido: depende del ancho del elemento contenedor o del ancho de la ventana del navegador en última instancia. La altura de los elementos es dependiente de su contenido: si el contenido ocupa más espacio, la altura será mayor; si ocupa menos, será menor. Debido a estas características, la utilización del porcentaje como unidad de medida varía: mientras que puede utilizarse sin problemas en la anchura aunque no se defina una anchura absoluta de base (ya que el 100% corresponde al ancho del contenedor), para que pueda utilizarse en la altura deberá definirse una altura de referencia en algún elemento contenedor para que pueda funcionar correctamente.\nPara solucionar este problema puede utilizarse la unidad vh en lugar del porcentaje. Puedes encontrar la explicación en este enlace.\nA continuación se muestra un ejemplo de cómo especificar altura de capas: ver ejemplo de altura de capas.\n"},{"id":18,"href":"/post/conceptos-basicos-css/","title":"Conceptos básicos de CSS","section":"Posts","content":"Este artículo tiene como objetivo ofrecer una introducción sobre CSS, explicar los tipos de hojas de estilo, el modelo de cascada y herencia, comprobar qué características están disponibles en los distintos navegadores y proporcionar una serie de recursos donde encontrar información más detallada.\nIntroducción # Las hojas de estilo en cascada CSS - Cascade Style Sheet en inglés - se utilizan para diseñar y dar formato a las páginas web escritas con HTML. Las razones de su aparición son las siguientes:\nHTML ofrece muy pocas opciones para dar formato al texto. Su función es estructurar el texto en secciones tales como tablas, listas, párrafos, etc., pero en cuanto a diseño visual resulta un tanto pobre. El diseñador de páginas web se encontraba con archivos HTML extremadamente liosos, ya que en el mismo texto se agrupaban contenidos, estructuras e instrucciones de formato visual, por lo que su modificación y elaboración resultaba ser muy complicada. La modificación del formato utilizado en un sitio web compuesto por un gran número de páginas resultaba muy difícil, ya que se tenían que cambiar manualmente los estilos de cada una de las páginas que formaban el sitio. Frente a esta situación, el organismo W3C decidió crear un sistema por el que las instrucciones de formato se encontraran separadas de los otros elementos. Así, a partir de la versión 4 de HTML se desaconseja utilizar elementos de formato y se sugiere la utilización de las hojas de estilo en cascada o CSS.\nUn ejemplo de las posibilidades que ofrecen las hojas de estilo se puede encontrar visitando la página Zengarden, donde se puede observar el efecto que produce en la misma página HTML utilizar una hoja de estilo u otra.\nEstructura modular # La versión actual de CSS es CSS 3. Esta especificación se ha dividido en una serie de módulos que son desarrollados por separado. Cada uno de dichos módulos hace referencia a una serie de funcionalidades (color, modelo de caja, fuentes, bordes, layout, media queries, selectores,\u0026hellip;).\nTipos de hojas de estilo # Una hoja de estilos contiene datos de formato relativos a los elementos definidos en la página HTML. Por lo tanto, ambos (documento HTML y hoja de estilo) deben estar relacionados de alguna manera. Existen tres maneras de utilizar hojas de estilo:\nAplicar estilos directamente a elementos HTML. De esta manera se escribe el código CSS dentro del atributo style de la etiqueta HTML en cuestión.Por ejemplo, para aplicar un estilo css a un párrafo: \u0026lt;p style=\u0026#34;código_css\u0026#34;\u0026gt;HOLA\u0026lt;/p\u0026gt; Hojas de estilos internas. Se utilizan para aplicar estilos a la página en la cual se utiliza. El código de la hoja de estilo se ubicará en la cabecera de la página web, entre las etiquetas siguientes: \u0026lt;style type=\u0026#34;text/css\u0026#34;\u0026gt; \u0026lt;!-- Código_css --\u0026gt; \u0026lt;/style\u0026gt; Hojas de estilos externas. Se utilizan para aplicar el mismo formato a varias páginas de un portal. Se definen en un archivo externo que será consultado por todas las páginas HTML del sitio web, reutilizando por tanto el código. Para ello se escribirá el código CSS en un documento externo con extensión css. Posteriormente se vinculará a la página web mediante la utilización de la siguiente etiqueta en la cabecera del documento HTML en cuestión: \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;nombre_archivo_css.css\u0026#34;\u0026gt; Cascada y herencia # CSS permite definir estilos en varios sitios, tal como hemos visto en el punto anterior. Además, es posible que un elemento reciba estilos de varios orígenes distintos. Algunos ejemplos de ello son:\nUn elemento tiene asignado un nombre de clase y un identificador. En la hoja de estilos se definen estilos para dicho identificador y dicho nombre de clase. Un elemento hereda el valor de una propiedad definida en alguno de los elementos que lo contienen. Un elemento recibe un estilo de una hoja externa, de una hoja interna y de un estilo aplicado directamente en la etiqueta. En casos como los descritos, ¿cómo se resuelven los conflictos si se definen valores distintos para la misma propiedad? ¿Son más importantes los estilos definidos para nombres de clase? ¿Los definidos en hojas internas?\nLa regla general es la siguiente: los estilos aplicados a selectores más concretos tienen mayor peso que los aplicados a selectores más generales. En caso de empate, el último estilo que se aplica es el que prevalece (las hojas de estilo externas se considera que se cargan antes que las hojas de estilo internas).\nEn concreto, el procedimiento que se aplica es el siguiente (fuente: https://www.w3.org/TR/CSS22/cascade.html#cascade):\nSe cuenta 1 si la declaración está incluida en un atributo style; si no, se cuenta 0. (Peso \u0026ldquo;a\u0026rdquo;, mayor importancia). Se cuenta el número de identificadores (ID) que aparezcan en el selector. (Peso \u0026ldquo;b\u0026rdquo;). Se cuenta el número de atributos (distintos al ID) , clases y pseudo-clases en el selector. (Peso \u0026ldquo;c\u0026rdquo;). Se cuenta el número de nombres de elementos y pseudo-elementos en el selector. (Peso \u0026ldquo;d\u0026rdquo;, menor importancia). Para determinar qué estilo se aplica en caso de conflicto se mira el resultado: el número más alto en la casilla de mayor peso es el que se aplica; en caso de empate, se comprueban los números de los pesos más bajos sucesivamente.\n* {} /* a=0 b=0 c=0 d=0 -\u0026gt; especificidad = 0,0,0,0 */ li {} /* a=0 b=0 c=0 d=1 -\u0026gt; especificidad = 0,0,0,1 */ li:first-line {} /* a=0 b=0 c=0 d=2 -\u0026gt; especificidad = 0,0,0,2 */ ul li {} /* a=0 b=0 c=0 d=2 -\u0026gt; especificidad = 0,0,0,2 */ ul ol+li {} /* a=0 b=0 c=0 d=3 -\u0026gt; especificidad = 0,0,0,3 */ h1 + *[rel=up]{} /* a=0 b=0 c=1 d=1 -\u0026gt; especificidad = 0,0,1,1 */ ul ol li.red {} /* a=0 b=0 c=1 d=3 -\u0026gt; especificidad = 0,0,1,3 */ li.red.level {} /* a=0 b=0 c=2 d=1 -\u0026gt; especificidad = 0,0,2,1 */ #x34y {} /* a=0 b=1 c=0 d=0 -\u0026gt; especificidad = 0,1,0,0 */ style=\u0026#34;\u0026#34; /* a=1 b=0 c=0 d=0 -\u0026gt; especificidad = 1,0,0,0 . Éste último es el que se aplica.*/ \u0026lt;head\u0026gt; \u0026lt;style type=\u0026#34;text/css\u0026#34;\u0026gt; #x97z { color: red } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p id=\u0026#34;x97z\u0026#34; style=\u0026#34;color: green\u0026#34;\u0026gt; \u0026lt;/body\u0026gt; En el ejemplo, el párrafo tendrá color verde, ya que el valor de su peso \u0026ldquo;a\u0026rdquo; es 1. Como el peso \u0026ldquo;a\u0026rdquo; es el más importante, es el que se impone a los demás.\n!important # Existe una manera de sobreescribir estilos CSS sin importar las reglas de especificidad: añadiendo !important a la regla correspondiente:\np { color: red !important; } #parrafo1 { color: green; } \u0026lt;p id=\u0026#34;parrafo1\u0026#34;\u0026gt;Será ROJO a pesar de que la regla es menos específica\u0026lt;/p\u0026gt; Hojas de estilo alternativas # Es posible incluir más de una hoja de estilo en un sitio web y ofrecer al usuario la posibilidad de usar una u otra mediante el uso de hojas de estilo alternativas.\nAlgunos navegadores (como Firefox) permiten seleccionar la hoja de estilos a través de sus menús (en Firefox, menú Ver / Estilo de página).\nPara incluir hojas de estilo alternativas se debe utilizar la etiqueta \u0026lt;link rel=\u0026quot;alternate stylesheet\u0026quot;\u0026gt;. A continuación se muestra un ejemplo:\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; title=\u0026#34;Estilo principal\u0026#34; href=\u0026#34;./css/estilos.css\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;alternate stylesheet\u0026#34; title=\u0026#34;Estilo alternativo 1\u0026#34; href=\u0026#34;./css/estilos1.css\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;alternate stylesheet\u0026#34; title=\u0026#34;Estilo alternativo 2\u0026#34; href=\u0026#34;./css/estilos2.css\u0026#34;\u0026gt; Compatibilidad entre navegadores # En ocasiones es difícil saber si una determinada propiedad CSS, sobre todo las más recientes, es compatible con una determinada versión de navegador. Para ello son muy útiles los siguientes enlaces:\nCan I Use? (¿Puedo utilizar\u0026hellip;?) Tabla de compatibilidad de propiedades CSS con los principales navegadores Recomendaciones de diseño con CSS # En el diseño de interfaces es recomendable definir clases de estilos para aplicar a determinadas secciones, elementos destacados, etc. De esta manera se conseguirá un código altamente modular que permitirá realizar cambios tanto de apariencia como de estructura con relativa facilidad.\nPor tanto, se intentará priorizar el uso de clases por encima del uso de selectores basados en nombres o agrupaciones de elementos. En este artículo se intenta entrar más en detalle sobre el tema.\nEnlaces de referencia de CSS # Curso de CSS de Mozilla - Excelente curso de CSS de la Fundación Mozilla Cursos de CSS en desarrolloweb.com - Cursos completos de CSS Tutorial CSS en W3Schools - Tutorial completo sobre CSS W3Schools howtos - Recetas para crear componentes en CSS CSS Tricks - Sitio web con infinidad de recursos CSSScript.com - Más recursos CSS Guía de referencia de propiedades CSS - Listado de propiedades CSS http://librosweb.es/css/ - Curso completo de CSS pero algo anticuado https://www.websiteplanet.com/blog/html-guide-beginners/ - Conceptos básicos de HTML "},{"id":19,"href":"/post/accesibilidad/","title":"Pautas de accesibilidad","section":"Posts","content":"La accesibilidad web es una práctica inclusiva que tiene como objetivo que no haya ninguna barrera que impida o limite el uso y acceso a Internet a personas con cualquier tipo de discapacidad.\nAccesibilidad web # Figure 1: Accesibilidad web. Fuente: Wikimedia\nMuchas de las personas que tienen algún tipo de discapacidad, tanto de tipo físico como de tipo intelectual, necesitan utilizar dispositivos especiales para acceder a los contenidos de Internet. Otras necesitan acceder a la información de manera adaptada, con contenidos simplificados para poder comprenderlos mejor. El organismo W3C desarrolla estándares web denominados Recomendaciones relacionados con esta área.\nWCAG # Web Content Accessibility Guidelines (WCAG) es un conjunto de recomendaciones desarrolladas por el organismo W3C cuyo objetivo es mejorar la accesibilidad de los contenidos web. WCAG define 12 directrices agrupadas en 4 principios. Para cada directriz se definen tres niveles de cumplimiento: A, AA y AAA.\nIntroducción a las Pautas de Accesibilidad para el contenido web (WCAG) WCAG 2.1 de un vistazo Validación # Existen varias herramientas de validación de las reglas WCAG. La mayoría de ellos no es capaz de analizar todas las recomendaciones y simplemente hacen sugerencias sobre apartados que podrían estar mal diseñados. En este enlace se comentan algunas de ellas. Uno de los más sencillos de usar es http://wave.webaim.org/.\nPrincipales recomendaciones # Las recomendaciones de la WCAG son bastante amplias, por lo que a no ser que se sea un experto en la materia pueden parecer difíciles de seguir. Por ello citaremos a continuación unas recomendaciones sencillas y fáciles de llevar a la práctica.\nCorregir problemas de usabilidad # El hecho de que un sitio sea más usable para el público general tiene como consecuencia que también será más efectivo para las personas con discapacidad.\nInformarse sobre las tecnologías de accesibilidad # Es recomendable informarse sobre cómo utilizan las tecnologías las personas con algún tipo de discapacidad. La mejor manera para ello es verlos en persona, pero la mayoría de nosotros no tiene esa posibilidad. A continuación se muestran algunos sitios con recursos sobre el tema:\nAsociación de lectura fácil Web Accesibility in Mind Implementar cambios en las páginas web # A continuación se enumeran los puntos más importantes para mejorar la accesibilidad de un sitio web.\nAñadir un atributo alt con información adecuada a cada imagen del sitio. La descripción debe ser breve y concisa, evitando repetir las mismas palabras en todas las descripciones. Utilizar correctamente los encabezados. Los encabezados \u0026lt;h1\u0026gt; deben utilizarse para el título de la página o título principal del contenido; los \u0026lt;h2\u0026gt; para las secciones; los \u0026lt;h3\u0026gt; para las subsecciones, etc. Así se facilita la navegación a través del teclado. Utilizar etiquetas \u0026lt;label\u0026gt; para los campos de los formularios. De esta manera se asocian las etiquetas con los campos y los lectores de pantalla pueden interpretarlos correctamente. Añadir un enlace del tipo Ir al contenido principal al principio de cada página. Así se evita tener que esperar tiempo escuchando las entradas del menú de navegación cada vez que se carga una página nueva. Hacer que haya un nivel de contraste adecuado entre el texto y el fondo. Utilizar plantillas accesibles si se utiliza un gestor de contenido. Utilizar las especificaciones WAI-ARIA. En los siguientes enlaces se ofrece una información más detallada sobre consejos de diseño y desarrollo:\nIntroducción al diseño y al desarrollo Consejos para creadores de contenidos Consejos para diseñadores web Consejos para desarrolladores web WAI-ARIA # WAI-ARIA es una documento técnico publicado por el W3C que especifica cómo mejorar la accesibilidad de páginas web. Presta especial atención a los siguientes aspectos:\nContenido dinámico generado a partir de AJAX. La mayoría de las páginas utilizan AJAX para realizar peticiones al servidor sin necesidad de recargar la página. Por ello, el contenido de determinadas áreas de la página puede cambiar y la persona que lo está utilizando puede no darse cuenta. ARIA establece algunas estrategias a implementar para que los cambios en la página sean notificados al usuario cuando se produzcan. Componentes de interfaz de usuario tales como pestañas, acordeones, migas de pan,\u0026hellip; Estos componentes normalmente se implementan utilizando etiquetas HTML genéricas (por ejemplo, etiquetas DIV) sin ningún tipo de significado semántico. ARIA ofrece algunas técnicas para anotar las etiquetas correspondientes y añadirles información sobre su uso y/o propósito. A continuación se muestran algunos recursos sobre las tecnologías WAI-ARIA:\nSitio web WAI-ARIA Técnicas ARIA para desarrolladores "},{"id":20,"href":"/post/diseno-prototipos/","title":"Diseño de prototipos","section":"Posts","content":"En todo proyecto de desarrollo web es recomendable realizar un prototipo o boceto del interfaz. De esta manera se puede tener una idea aproximada del aspecto visual que tendrá, qué secciones lo compondrán, cómo se verá en pantalla, etc.\nEl principal objetivo es generar un boceto de manera rápida, sin necesidad de utilizar código. Estos bocetos permiten acordar las características del interfaz web con el cliente o con el resto de miembros del equipo de desarrollo.\nComo paso previo a la creación de un prototipo es necesario haber planificado adecuadamente la interfaz y haber acordado las normas de diseño y el aspecto visual del sitio.\nExisten varias posibilidades para crear prototipos:\nPapel - Es la opción más rápida y sencilla. Digital - Hace uso de algún programa de edición sencillo. Puede ofrecer algo de funcionalidad (interacción con enlaces, por ejemplo). Nativo - Está implementado haciendo uso de las tecnologías reales de la aplicación. Normalmente se utiliza como último paso antes del lanzamiento del producto. Prototipos en papel # Figure 1: Prototipo de papel. Fuente: Wikimedia\nLos prototipos en papel ofrecen una primera aproximación al diseño de la interfaz. Pueden realizarse tan sencillos como se desee (en blanco y negro, en la típica servilleta de bar que se pone como ejemplo de germen de todas las grandes ideas,\u0026hellip;) o con un nivel de complejidad más elevado (utilizando distintos tipos de papeles, colores, materiales,\u0026hellip;).\nLa principal ventaja de este tipo de prototipos es que no necesitan de ningún tipo de conocimiento técnico. Por lo tanto, se suelen utilizar como una primera aproximación para el diseño de la interfaz.\nUna vez creados en papel los bocetos de las distintas páginas que componen el sitio se pueden tomar fotografías para simular determinadas interacciones y estados de la aplicación. Esas imágenes pueden utilizarse a su vez para crear animaciones y distribuir el prototipo de manera más eficiente sin la necesidad de tener que cargar con el papel de un lado a otro.\nEn el siguiente enlace se puede consultar un vídeo sobre cómo Google utiliza este tipo de prototipos: Rapid Prototyping 1 of 3: Sketching \u0026amp; Paper Prototyping.\nPrototipos digitales # Figure 2: Prototipo digital\nPara la creación de estos prototipos se hace uso de alguna herramienta específica de edición. El objetivo es crear un boceto más parecido a la realidad que incluso pueda ofrecer un mínimo nivel de interactividad. El diseño puede ser exportado a un archivo de imagen, HTML o PDF para adjuntar a la documentación del proyecto.\nEn el siguiente enlace se puede consultar un vídeo sobre cómo Google utiliza este tipo de prototipos: Rapid Prototyping 2 of 3: Digital Prototyping.\nPrototipos nativos # Figure 3: Prototipo nativo\nLos prototipos nativos utilizan las mismas tecnologías (lenguajes de programación, librerías,\u0026hellip;) y dispositivos (teléfonos móviles, pantallas,\u0026hellip;) que utilizará la aplicación real. Se utilizan por tanto como último paso antes del desarrollo de la aplicación real. Una vez el prototipo ha sido correctamente testado en los dispositivos en los que se va a utilizar puede integrarse en la aplicación junto con el resto de componentes (lógica de negocio y almacenamiento de datos).\nEn el siguiente enlace se puede consultar un vídeo sobre cómo Google utiliza este tipo de prototipos: Rapid Prototyping 3 of 3: Native Prototyping.\nDiseño web adaptable - Mobile First # La tendencia actual consiste en diseñar siguiendo la teoría de Mobile First, o Móvil primero. Esta teoría aboga por realizar el diseño pensando en dispositivos móviles y a continuación añadir o modificar características para adaptar el diseño a otro tipo de dispositivos con pantallas más grandes.\nLa elección de este patrón de diseño se debe a que los buscadores dan más peso a los sitios web optimizados para dispositivos móviles dado que la mayoría de usuarios que se conectan a Internet lo hacen mediante este tipo de dispositivos.\nUna vez creado el diseño para móvil se procede a crear las versiones para pantallas más grandes. De esta manera el sitio web se adapta a distintos tipos de pantallas siguiendo el patrón de diseño web adaptativo.\nHerramientas de creación de prototipos digitales # Existe un gran número de herramientas para creación de prototipos. Muchas de ellas son de pago, aunque hay alternativas gratuitas con una funcionalidad algo más reducida pero que puede ser suficiente para realizar un boceto rápido. Algunas de ellas se enumeran a continuación:\nFigma - Herramienta online. Comercial. Gratuita para 3 proyectos. Pencil - Programa de escritorio. Open Source. wireframe.cc - Herramienta online. Comercial. Ofrece demo gratuita. Moqups - Herramienta online. Comercial. Ofrece cuentas gratuitas a estudiantes y proyectos Open Source. Principle - Herramienta para Mac. Comercial. proto.io - Herramienta online. Comercial. Marvel - Herramienta online. Comercial. Ofrece un plan gratuito para un proyecto. InVision - Herramienta online. Comercial. Ofrece un plan gratuito para un proyecto. mockup.io - Herramienta online. Comercial. Ninja Mock - Herramienta online. Comercial. Balsamiq - Herramienta de escritorio y online. Comercial. Otros recursos # A continuación se enumeran algunos enlaces que pueden ser de utilidad en la creación de prototipos:\nLorem Ipsum - Generador de textos de relleno. Smashing Magazine - Sitio web relacionado con el desarrollo y diseño web. Web Yurt - Sitio web relacionado con el desarrollo y diseño web. Creative Bloq - Sitio web dedicado al arte y diseño gráfico. "},{"id":21,"href":"/post/planificacion-guia-estilo/","title":"Guias de estilo","section":"Posts","content":"Una guía de estilo recoge las normas de diseño que se utilizarán para crear un sitio web. Normalmente hace referencia a una serie de elementos (tipografía, colores, logos, etc.) que se deben utilizar para garantizar la uniformidad de la estructura y apariencia visual del sitio.\nLogo # El logo es la imagen del sitio web. Es importante diseñarlo adecuadamente para que refleje correctamente la temática y el contenido del sitio web.\nPara diseñar un logo se suele recurrir a algún programa de dibujo vectorial como Inkscape. La principal ventaja de los gráficos vectoriales es que no están formados por píxeles, por lo que no pierden calidad. Una vez creado el gráfico vectorial éste puede ser exportado a diferentes formatos (PNG, JPG,\u0026hellip;) o personalizado (blanco y negro, cambio de colores, versiones con o sin texto,\u0026hellip;) para su uso en el sitio web.\nAlgunos recursos para crear un logo:\nhttps://logomakr.com/ Inkscape (software OpenSource equivalente a Adobe Illustrator) Videotutorial: creación de un logo básico con Inkscape Paleta de colores # A la hora de elegir la paleta de colores es importante definir como mínimo:\nUn color principal Una paleta de colores complementaria del color principal Un color de fondo El color principal suele estar presente en el logo y todos los aspectos relacionados con la marca del sitio. También suele aparecer en los encabezados y en los botones de formulario que activen la acción principal.\nAlgunos recursos para generar una paleta de colores:\nhttps://colordesigner.io/ https://yeun.github.io/open-color/ https://coolors.co Tipografía # La tipografía es uno de los elementos más importantes a tener en cuenta. Se deben elegir cuidadosamente los tipos de letra que mejor casen con la temática del sitio y el diseño del logo. Normalmente se utiliza una tipografía principal para encabezados y otra para el resto del texto.\nAlgunos recursos para elegir tipografías:\nhttps://fonts.google.com/ (Google Fonts ofrece un repositorio de tipografías Open Source para usar libremente en cualquier tipo de proyecto, comercial o no comercial) https://www.smashingmagazine.com/2019/07/gorgeous-free-open-source-typefaces/ Estructura # La estructura del sitio es otro de los aspectos que puede ser incluido en una guía de estilo. La posición de los elementos de navegación (menús, migas de pan,\u0026hellip;), el número de capas que tendrá el sitio (contenido, cabecera, pie,\u0026hellip;), donde incluir información de contacto (teléfonos, dirección,\u0026hellip;) o dónde incorporar una posible área para anuncios son algunos de los puntos que se pueden detallar. Entraremos más en detalle sobre este tema en otros artículos.\nElementos gráficos # En este apartado se suele hacer referencia a alguno de estos elementos:\nIconos Imágenes (tamaños, uso en fondos de página, efectos, tipos de edición,\u0026hellip;) Animaciones Patrones de decoración Algunos recursos para elegir elementos gráficos:\nhttps://octicons.github.com/ https://useiconic.com/open/ https://material.io/resources/icons/?style=baseline https://feathericons.com/ Ejemplos de guías de estilo # Guía de estilo de Mozilla Firefox Photon Design System (para diseño de productos basados en Firefox) Guía de estilos de la UPV Material Design (Google) Referencias # https://marinarodrigo.com/como-y-por-que-crear-una-guia-de-estilo-para-tu-web/ https://www.toptal.com/designers/ui/ui-styleguide-better-ux https://www.krasamo.com/creating-ui-style-guide-for-web-and-mobile-apps/ https://www.uoc.edu/portal/en/llibre-estil/guies/digital/index.html https://www.smashingmagazine.com/2018/02/comprehensive-guide-to-mobile-app-design/ https://developer.android.com/design "},{"id":22,"href":"/post/planificacion-fundamentos/","title":"Fundamentos de la planificación de interfaces web","section":"Posts","content":"Antes de proceder a la edición de código e incluso antes de la creación de un prototipo es necesario tener claros algunos principios de diseño y tomar algunas decisiones relacionadas con el estilo general del sitio, que normalmente vendrán recogidas en la guía de estilo.\nEn este artículo nos centraremos en analizar algunos de los principios generales de diseño más importantes a tener en cuenta. Para ello se tomará como base el libro \u0026ldquo;Don\u0026rsquo;t Make Me Think\u0026rdquo; (No me hagas pensar), de Steven Krug.\nDon\u0026rsquo;t make me think! # \u0026ldquo;No me hagas pensar\u0026rdquo; es el principio más importante que toda página debería seguir en cuanto a usabilidad. El objetivo principal de toda página web debería ser que fuera evidente, auto-explicativa. El usuario debería ser capaz de ver de un vistazo lo que la página propone sin gastar mucho tiempo pensando sobre ello.\n¿Cómo de evidente? Lo suficiente como para que una persona que no sea experta en el tema propuesto en la página y que apenas sepa usar el navegador sea capaz de llegar al sitio y decir \u0026ldquo;Ah, esta página va de\u0026hellip;\u0026rdquo;.\nErrores típicos # Nombres poco claros, como nombres de marcas, específicos del funcionamiento interno de la empresa o siglas o nombres técnicos. Enlaces y botones que no se muestran de manera obvia y se confunden con texto normal. Asumir que el usuario conoce una información que en realidad desconoce. No saber en qué lugar del sitio web se está ni cómo volver a un sitio conocido (como por ejemplo, la página principal). No ofrecer un punto de entrada claro para empezar a utilizar el sitio. No mostrar los elementos típicos (menús de navegación, etc.) en los sitios habituales. Sobrecargar la página con información de manera que no se sepa qué es importante o qué no. Mezclar el contenido de la página con la publicidad de la misma de manera que sea muy difícil diferenciar ambas cosas. El objetivo principal es eliminar todas aquellas preguntas que se pueda hacer el usuario a la hora de utilizar la página.\nDiseño orientado al escaneo, no a la lectura # Sigue las convenciones del diseño web. Los elementos (menús, logo, contenido,\u0026hellip;) están dispuestos de manera convencional. Los elementos (cuadros de búsqueda, iconos de vídeo o audio, redes sociales,\u0026hellip;) son reconocibles. Dispone de una jerarquía clara. Queda claro qué apartados son más importantes que otros. Los encabezados de distintos niveles son perfectamente distinguibles unos de otros. Las capas agrupan correctamente los contenidos relacionados entre sí. Las páginas están divididas en áreas bien definidas. Los enlaces y botones se distinguen del texto normal. No hay contenido que distraiga al usuario. No hay demasiadas zonas que llamen la atención del usuario de manera evidente (animaciones, exclamaciones, anuncios parpadeando,\u0026hellip;). La página muestra un aspecto organizado y es fácil reconocer cada una de las áreas en que está dividida. El contenido está estructurado de manera que sea fácil escanear la página. Hay encabezados que separan las secciones de texto. Queda claro qué encabezado está relacionado con el contenido. Los párrafos son cortos. Se utilizan listas para esquematizar el contenido. La cursiva y la negrita se utilizan pero de manera puntual. Elecciones sencillas # Los usuarios buscan elecciones sencillas. Es más recomendable ofrecer pocas opciones en varios pasos que muchas opciones en pocos pasos. Las opciones que se ofrecen deben ser lo suficientemente distintas como para no dudar entre una u otra. Las instrucciones deben desaparecer o minimizarse al máximo. En caso de aparecer, deben ser: Breves (mínima cantidad de información que sea útil). Oportunas (deben aparecer exclusivamente cuando sean necesarias). Visibles (deben captar la atención del usuario y no pasar desapercibidas). Omisión de palabras inútiles # Es conveniente eliminar la mayoría de palabras inútiles en la página. Una vez escrito el texto, es conveniente analizarlo para intentar eliminar la mitad de las palabras. Se debe intentar evitar textos de bienvenida y descripciones al principio de las secciones y en la página principal. Las instrucciones deben escribirse de manera concisa. Diseño de la navegación # Tipos de usuarios # Orientados a la navegación. Orientados a la búsqueda. Objetivos del menú de navegación # Ayudar a encontrar lo que se está buscando. Indicar la localización actual dentro del sitio. Mostrar el contenido del sitio web. Explicar cómo utilizar el sitio. Dar confianza en la calidad del sitio. Convenciones # Los menús de navegación deben aparecer en los sitios convencionales. La navegación debe de mostrarse de manera consistente en todas las páginas, con algunas excepciones: Páginas de pago online. Páginas de registro, suscripción, personalización de preferencias,\u0026hellip; Es conveniente mostrar el logo de la página que actúe de enlace a la página principal en la parte superior izquierda. Elementos de la navegación # Navegación primaria. # Muestra las secciones principales del sitio. Utilidades # Son herramientas que utilizará el usuario. Ejemplos: cuadro de búsqueda, carrito de compra, \u0026ldquo;mi cuenta\u0026rdquo;, enlaces para iniciar sesión,\u0026hellip; Se deben mostrar las cuatro o cinco más importantes en lugar visible (junto a la navegación primaria, por ejemplo). El resto deben mostrarse en el pie de página. Enlace a la página principal # En el logo de la empresa. En la navegación principal. Navegación secundaria y posteriores # Se debe prestar atención a todos los niveles de navegación, no solo a los principales. De esta manera se asegura una coherencia a todos los niveles. Búsqueda # Es conveniente mostrar un cuadro de búsqueda en las utilidades. El cuadro de búsqueda debe mostrarse de manera convencional (icono de buscar o palabra \u0026ldquo;Buscar\u0026rdquo;). No deben mostrarse muchas opciones de búsqueda o filtrado en primera instancia. En su lugar, se deben mostrar cuando ya se haya realizado la primera búsqueda con el objeto de ayudar a filtrar los resultados. Nombres de las páginas # Se debe mostrar el nombre de cada una de las páginas en la parte superior del contenido. El nombre debe resaltarse de manera adecuada, ya que es el elemento de mayor jerarquía de la página. El nombre debe concordar con el nombre de la opción del menú que ha conducido a dicha página. Localización # El menú de navegación debe resaltar la sección o secciones en las que se está en cada momento. El resaltado debe ser evidente. Migas de pan # Deben aparecer en la parte superior. Se debe utilizar \u0026ldquo;\u0026gt;\u0026rdquo; para separar niveles. El último nivel (nombre de la página actual) no debe ser un enlace y debe aparecer destacado. Pestañas # Son evidentes y fáciles de usar. Deben estar correctamente configuradas para resaltar la sección actual. Test de navegación # El diseñador siempre piensa que el usuario va a llegar a la página deseada a través de la página principal y desde allí a través de la navegación. Sin embargo, en multitud de ocasiones se llega a una página directamente a través de un enlace enviado por otra persona o a través de un buscador. Por ello, al llegar a una página interior de un sitio web directamente se debería poder contestar a las siguientes preguntas sin demasiada dificultad:\n¿Qué sitio es éste? (Nombre del sitio o compañía) ¿En qué página estoy? (Nombre de la página) ¿Cuáles son las secciones principales? (Navegación primaria) ¿Qué opciones tengo en este nivel? (Navegación local) ¿En qué lugar me encuentro dentro de la jerarquía? (Localización) ¿Dónde puedo realizar una búsqueda? Referencias # Don\u0026rsquo;t make me think, enlace a la web del autor del libro, Steven Krug https://amybughunter.wordpress.com/2014/08/16/book-summary-dont-make-me-think-by-steve-krug/ http://www.squeezedbooks.com/articles/dont-make-me-think-a-common-sense-approach-to-web-usability-%282nd-edition%29--summary.html "},{"id":23,"href":"/post/herramientas-desarrollo/","title":"Herramientas de desarrollo","section":"Posts","content":"A continuación se muestran algunas herramientas de desarrollo que considero interesantes. Este artículo estará en continua revisión.\nEditores # Visual Studio Code Atom Brackets Sublime Text Notepad ++ Emmet (plugin) IDEs # Eclipse Paquete para JavaScript Netbeans Soporte para JavaScript Editores online para prototipos rápidos # https://jsbin.com https://jsfiddle.net/ http://codepen.io/ https://www.jsnippet.net/ Herramientas de desarrollo de navegadores # Chrome DevTools (Chrome) Firefox Dev Tools (Firefox) Servicios de validación # W3C HTML Validation Service W3C CSS Validation Service JSLint (Chequeo de sintaxis y código JavaScript) Git # Git para Windows Node (plataforma de desarrollo en JavaScript) # Node JS Node packages Diagramas y diseño # PlantUml Draw.io Licencias # Copyright Copyleft Open Source Definition Choose a License Creative Commons licenses (Para creaciones que no son código, como sitios web, multimedia, textos, libros, etc.) "},{"id":24,"href":"/post/uso-github/","title":"GitHub","section":"Posts","content":"En este artículo se explicará el uso de la herramienta GitHub y las posibilidades que ofrece en el entorno educativo.\nVideotutoriales # Sesión 3.1 Sesión 3.2 Sesión 3.3 Sesión 3.4 Índice # Breve descripción y posibilidades en la gestión de tareas del alumnado Alternativas: GitLab, BitBucket,\u0026hellip; Cuentas Configuración de la cuenta Manejo básico de la plataforma Repositorios: manejo y ajustes Red social: comentarios, seguidores, etc. Issues y Proyectos Colaboración: Forks y Pull Requests Organizaciones Referencias # Ayuda de GitHub Sintaxis de MarkDown Permisos de los colaboradores en un repositorio Solicitud de pack de estudiante Cerrar issues a través de mensajes en el commit Contenidos # Presentación "},{"id":25,"href":"/post/fundamentos-git-2/","title":"Fundamentos de git II","section":"Posts","content":"Este artículo tiene como objetivo profundizar en el manejo de Git con el uso de ramas y repositorios remotos.\nVideotutoriales # Sesión 2.1 Sesión 2.2 Sesión 2.3 Sesión 2.4 Índice # Ramas Fusiones de ramas Conflictos Remotos Flujos de trabajo con ramas Referencias # Libro de Git Hoja de referencia de Git Hoja de referencia de Git (PDF) Herramienta \u0026ldquo;Visualizing Git\u0026rdquo; (muy interesante para comprender el funcionamiento interno de Git y el trabajo con ramas y remotos) Contenidos # Ramas # Definición de ramas # Una rama es un puntero que apunta a un determinado commit. Un repositorio debe tener una rama como mínimo. El nombre de la rama que se crea por defecto es master. Este nombre no es especial ni tiene una función o significado especial. Existe un puntero especial llamado HEAD que apunta a la rama en la que estamos en ese momento. Al cambiar de rama se modifica el contenido del directorio de trabajo: éste se muestra tal como estaba en la rama a la que hemos saltado. La creación y el cambio de ramas se realizan de forma instantánea: no tienen apenas coste. El trabajo con ramas es muy interesante por los siguientes motivos: Se pueden hacer pruebas sin modificar el código en producción. Se puede separar el trabajo en tareas o subproyectos que no afecten unos a otros. Cada miembro del equipo puede trabajar sin ser interferido por los demás. Crear ramas # git branch \u0026lt;nombre_rama\u0026gt; Este comando creará una rama nueva con el nombre seleccionado. Si no se indica ningún parámetro adicional, la rama creada apuntará HEAD, es decir, el último commit de la rama en la que nos encontremos.\nUna alternativa es ejecutar git checkout -b \u0026lt;nombre_rama\u0026gt;. Este comando creará una rama con el nombre indicado y cambiará a dicha rama.\nEs posible crear una rama que apunte a un commit o una rama determinada mediante el comando:\ngit branch \u0026lt;nombre_rama\u0026gt; \u0026lt;COMMIT_HASH\u0026gt; git branch \u0026lt;nombre_rama\u0026gt; \u0026lt;NOMBRE_RAMA_EXISTENTE\u0026gt; Ver ramas disponibles # git branch Este comando mostrará las ramas locales existentes en el repositorio. Si se desea ver las ramas existentes en el remoto (ver sección siguiente) se puede ejecutar git branch --all.\nCambiar de rama # git checkout \u0026lt;nombre_rama\u0026gt; git switch \u0026lt;nombre_rama\u0026gt; Cualquiera de los dos comandos anteriores cambiará a la rama indicada. Es posible que el comando falle si hay cambios en el directorio de trabajo que no estén integrados en ningún commit: si dichos pueden ser sobreescritos por los cambios de la rama a la que se desea cambiar, git abortará el cambio de rama y nos indicará el problema. En ese caso deberemos crear un commit con los cambios que estemos realizando (o bien guardarlos mediante git stash) y a continuación volver a ejecutar el comando de cambio de rama.\nFusionar una rama # Fusionar una rama, en inglés merge, consiste en incorporar los cambios presentes en una rama a la rama en la que nos encontramos actualmente. Para realizar una fusión hay que realizar las siguientes acciones:\nPrimero nos posicionamos en la rama sobre la que se va a realizar la fusión (la rama que va a recibir los cambios) Para realizar la fusión ejecutar: git merge \u0026lt;nombre_rama_a_fusionar\u0026gt; Si por ejemplo queremos integrar en la rama principal (master) los cambios presentes en la rama feature1, cambiaremos a la rama principal (si no estamos ya en ella) mediante git checkout master y a continuación ejecutaremos git merge feature1.\nConflictos # Al fusionar una rama pueden producirse conflictos. Un conflicto se produce cuando diferentes commits introducen cambios en las mismas líneas de los mismos archivos. Si por ejemplo estamos en un commit referenciado por dos ramas y realizamos desde ese punto común un commit en cada una de las ramas de manera que afecten a la misma línea del mismo fichero, se producirá un conflicto al fusionar una rama en la otra.\nPor ejemplo, en esta imagen podría producirse un conflicto si queremos incorporar los cambios de la rama master en la rama rama1 mediante git merge master (siempre que los cambios producidos en los commits afecten a las mismas líneas de los mismos ficheros).\nAl producirse un conflicto, git no sabe qué cambios deben prevalecer: los de la rama A, los de la rama B, los dos, ninguno, algo totalmente distinto,\u0026hellip; En este caso es necesaria la intervención humana. Git modificará los ficheros afectados incluyendo delimitadores para indicar los cambios que vienen de una rama y los que vienen de HEAD, es decir, de la rama en la que nos encontremos.\nEs importante recalcar que git no perderá información: la incluirá toda, junto con los delimitadores para identificar la procedencia de los cambios.\nSi se produce un conflicto git quedará en un estado intermedio: añadirá al área de preparación (color verde) los archivos que no presenten conflictos e indicará los archivos en conflicto, en color rojo, para que el usuario los edite y resuelva los conflictos.\nResolver los conflictos pasa por editar el archivo, localizar los delimitadores y dejar el archivo como queremos que quede. Normalmente esta última acción consistirá en decidir qué cambios son los que queremos dejar y eliminar los delimitadores. Al final, el fichero debe quedar tal como queremos que quede: en ocasiones una de las versiones será la correcta; en otras, la otra versión; en otras, ninguna; en obras, ambas; en otras, algo totalmente distinto.\nUna vez resuelto el conflicto en todos los archivos habrá que ejecutar los comandos git add y git commit para crear un commit que resuelva el conflicto.\nEliminar una rama # git branch -d \u0026lt;nombre_rama\u0026gt; Este comando eliminará la rama local indicada. IMPORTANTE: la eliminación de una rama supone la eliminación del puntero que hace referencia a un determinado commit. Si al eliminar una rama se quedan commits sin referenciar, dichos commits se perderán: pueden recuperarse durante un tiempo solo si se conocen sus hash; git realiza también tareas de limpieza al realizar algunas acciones y procede a limpiar los commits \u0026ldquo;huérfanos\u0026rdquo;, por lo que pasado un tiempo ni siquiera se podrán recuperar a través de sus hash.\nEn el ejemplo siguiente, si se elimina la rama test1 se perderán los commits 5aebbf7, 897742a y 6ba47e7, ya que no habrá ninguna rama que haga referencia a ellos.\nRemotos # Los repositorios remotos son versiones del proyecto que están alojadas en un servidor web o en una carpeta accesible a través de la red.\nLos repositorios remotos se almacenan en una forma especial denominada bare, que no dispone de directorio de trabajo.\nLos repositorios remotos pueden estar configurados como solo lectura o lectura/escritura.\nLos repositorios remotos suelen utilizarse como punto de referencia de alojamiento del código: es posible realizar copias de dicho repositorio remoto denominadas clones, que pueden evolucionar de manera independiente. Esto hace que git sea un sistema descentralizado de gestión de código, ya que cada clon es un repositorio completo e independiente del resto.\nEs posible sincronizar los cambios de un repositorio remoto a partir de los cambios de un repositorio local y viceversa.\nClonar un repositorio # git clone \u0026lt;URL_REPOSITORIO\u0026gt; Este comando permite clonar un repositorio remoto a partir de su URL. También es posible indicar una ruta del sistema de ficheros. Por defecto se mostrará la rama principal del repositorio remoto. El resto de ramas no aparecen como ramas locales, aunque pueden obtenerse.\nAl clonar un repositorio se crea una referencia al remoto en el repositorio local con el nombre origin que hace referencia a la URL indicada.\nVer remotos # git remote -v Este comando permite ver los remotos configurados. Otra alternativa es ejecutar git remote show \u0026lt;nombre_del_remoto para ver los detalles del repositorio remoto.\nAñadir, eliminar y renombrar remotos # git remote add \u0026lt;NOMBRE_REMOTO\u0026gt; \u0026lt;URL_REPOSITORIO\u0026gt; # Añadir remoto git remote rm \u0026lt;NOMBRE_REMOTO\u0026gt; # Eliminar remoto git remote rename \u0026lt;NOMBRE_ORIGINAL\u0026gt; \u0026lt;NOMBRE_NUEVO\u0026gt; # Renombrar remoto Estos comandos permiten añadir y editar repositorios remotos. Un repositorio local puede tener 0 o más remotos.\nTraer información del remoto # # Este comando NO realiza la fusión en la rama local # Si se desean incorporar los cambios habría que realizar un git merge git fetch [NOMBRE_REMOTO] # El nombre del remoto por defecto es ORIGIN Este comando permite actualizar la información de los repositorios remotos. git se conecta al remoto y comprueba si hay nuevos cambios en las ramas remotas; si es así, actualiza los punteros de las ramas remotas del repositorio local para reflejar dichos cambios. Pero no incorpora los cambios a las ramas locales.\nCuando un repositorio tiene configurado un remoto, git crea en el repositorio local unos punteros que hacen referencia a las ramas remotas. Dichos punteros son similares a las ramas locales, con la peculiaridad de que no se puede cambiar a una rama remota. Es decir, las ramas remotas son de solo lectura: hacen referencia a la información que tiene git de la situación del repositorio remoto (dónde están las ramas en el repositorio remoto).\nEn este punto es necesario insistir en la idea de que git es un sistema descentralizado: git no se está ejecutando continuamente (no es un demonio o un servicio), por lo que no está en contacto continuo con el remoto; si se producen cambios en el remoto (porque otra persona ha realizado un commit en una rama, por ejemplo), el repositorio local no se sincronizará automáticamente, sino que para él la rama remota seguirá en el mismo lugar que estaba cuando realizó el último fetch; si a continuación de dicho cambio se ejecuta un nuevo fetch, entonces el repositorio local tomará conciencia del nuevo cambio en la rama remota y actualizará el puntero de dicha rama remota al nuevo commit.\nEn resumen: git fetch es la única manera de que el repositorio local tenga conciencia de que ha habido cambios en el repositorio remoto.\nTraer y fusionar cambios del remoto # git pull [NOMBRE_REMOTO] [NOMBRE_RAMA] # Pull = fetch + merge Un pull equivale a dos acciones: un fetch y un merge. Mediante fetch, git comprueba los cambios que hay en las ramas remotas y los refleja en los punteros de las ramas remotas en el repositorio local; a continuación, la acción merge incorpora los cambios de la rama remota a la rama local correspondiente.\nEsta operación es una de las más habituales a la hora de sincronizar los cambios con el repositorio remoto. En la mayoría de los casos, las ramas local y remota están asociadas: es decir, git ha sido informado de que dicha rama local tiene que sincronizarse con la rama remota correspondiente. Lo más habitual es que ambas ramas (local y remota) tengan el mismo nombre. En ese caso bastará con ejecutar git pull sin parámetros: git asumirá que si estamos en la rama rama1, por ejemplo, tiene que sincronizarse con la rama rama1 remota.\nDicho todo esto, es posible fusionar el contenido de una rama remota en otra rama distinta a la asociada. Las ramas remotas pueden ser referenciadas como \u0026lt;nombre_remoto\u0026gt;/\u0026lt;nombre_rama_remota\u0026gt;. Así, la rama origin/rama1 hará referencia a la rama rama1 del repositorio remoto origin. Si estamos posicionados en la rama master local podríamos incorporar los cambios de la rama remota origin/rama1 de dos maneras:\nEjecutando git merge origin/rama1 - Directamente estaremos incorporando los cambios de la rama remota origin/rama1 en la rama local master. En este caso, la rama local rama1 no recibiría los nuevos cambios que pudiera tener la rama remota origin/rama1 Otra opción sería: Cambiar a la rama local rama1: git checkout rama1 Fusionar los cambios de su rama remota asociada: git pull, o git pull origin rama1 si no estuvieran asociadas. En este punto, la rama local rama1 recibiría los nuevos cambios que pudiera haber en la rama remota origin/rama1 Cambiar de nuevo a la rama local master: git checkout master Por último, fusionar los cambios de la rama local rama1: git merge rama1 No hay una manera mejor que otra: simplemente hay que tener claro qué acciones se están ejecutando y qué cambios es están produciendo.\nEnviar cambios al remoto # git push [NOMBRE_REMOTO] [NOMBRE_RAMA] Esta operación permite enviar los commits locales de una rama a la rama indicada del repositorio remoto. Sería el inverso de pull: mientras que pull trae cambios del remoto, push los envía.\nTal como pasa con git pull, la mayoría de las veces las ramas local y remota están asociadas, por lo que si ejecutamos git push sin parámetros se enviarán los cambios de la rama en que nos encontremos a la rama remota asociada (la mayoría de las veces tendrán el mismo nombre).\nRamas asociadas # Anteriormente hemos hecho referencia al concepto de rama asociada. Una rama asociada es una rama local configurada para hacer referencia a una rama determinada del repositorio remoto. Si una rama está asociada a una rama remota, al situarnos en dicha rama y ejecutar un git push o un git pull haremos referencia a la rama remota asociada correspondiente sin necesidad de tener que especificarla en dichos comandos.\nPodemos asociar una rama a una rama remota de varias maneras:\nAl ejecutar un git clone automáticamente se crea una rama local principal (normalmente con el nombre master o main) asociada a la rama remota principal (master o main, casi siempre). Al realizar un cambio de rama local a una rama existente en el repositorio remoto mediante git checkout \u0026lt;rama_existente_en_remoto\u0026gt; se creará una rama local con el mismo nombre que la rama remota y se realizará la asociación de dichas ramas. Por ejemplo, si en el remoto existe una rama principal master y una segunda rama llamada rama1, al realizar el clonado solamente tendremos disponible en local la rama master; si a continuación ejecutamos git checkout rama1 veremos que se crea la rama local rama1, que apunta al mismo commit que la rama remota correspondiente y que ambas ramas quedan asociadas. Si creamos una rama local nueva que no exista en el repositorio remoto, podemos posicionarnos en dicha rama y a continuación ejecutar el comando git push -u \u0026lt;nombre_remoṭo\u0026gt; \u0026lt;nombre_rama\u0026gt; para crear una rama remota del mismo nombre, sincronizarla con la rama local y realizar la asociación de dichas ramas. La opción clave es la opción -u, equivalente a --set-upstream. "},{"id":26,"href":"/about/","title":"Acerca de","section":"Página principal - Blog de Pedro Prieto","content":"Mi nombre es Pedro Prieto. Soy profesor del IES Mare Nostrum de Alicante. Este blog tiene como objetivo servir como plataforma para publicar los materiales de mis clases. Espero que poco a poco se convierta en una buena fuente de recursos tanto para los alumnos como para cualquier persona interesada en los temas que aquí se tratan.\n"},{"id":27,"href":"/post/fundamentos-git-1/","title":"Fundamentos de Git I","section":"Posts","content":"En este artículo se pretende dar una introducción a los comandos más comunes del software de control de versiones Git.\nVideotutoriales # Sesión 1.1 Sesión 1.2 Índice # Breve introducción a Git Entornos: consola y escritorio Instalación Configuración Creación de repositorios Cómo guardar cambios Historial de cambios Cómo deshacer cambios Etiquetado Referencias # Libro de Git Hoja de referencia de Git Hoja de referencia de Git (PDF) Contenidos # Instalación # https://git-scm.com/download Configuración # # Opciones obligatorias (nombre y correo) git config --global user.name \u0026#34;Nombre y apellido\u0026#34; git config --global user.email CORREO@ELECTRONICO # Editor de preferencia: elegir solo una opción # Editor de preferencia. Como primer ejemplo se incluye Notepad++ en Windows git config --global core.editor \u0026#34;\u0026#39;C:/Program Files/Notepad++/notepad++.exe\u0026#39; -multiInst -notabbar -nosession -noPlugin\u0026#34; Si no se indica un editor de preferencia git utilizará el editor vim cuando tenga que solicitar la intervención del usuario (al hacer un merge, o si el usuario ejecuta git commit sin indicar el mensaje). Este editor es complicado de utilizar para alguien no iniciado, por lo que es muy recomendable cambiar el editor por defecto.\nCreación de repositorios # git init Ciclo de vida # Revisando el estado # git status Esquema de colores:\nRojo - Identifica los archivos modificados o nuevos. Si se crean archivos dentro de carpetas nuevas, git status solo mostrará el nombre de la carpeta, no su contenido. Si se desea ver el contenido de las carpetas nuevas se deberá ejecutar git status -u. Verde - Identifica los archivos en el área de preparación. Visualizar cambios # git diff git diff \u0026lt;archivo\u0026gt; Este es uno de los comandos más utilizados en git. Nos permite ver los cambios en los archivos del repositorio o en una ruta específica.\nAñadir archivos al área de preparación (stage) # git add \u0026lt;archivo\u0026gt; # Añadir archivos individuales git add . # Añadir todos los archivos nuevos o modificados El área de preparación contiene los cambios que se añadirán a la nueva versión cuando ejecutemos un commit. Es posible la siguiente situación:\nModificar un fichero (aparecerá en color rojo al hacer un git status) Añadir el fichero al área de preparación mediante git add FICHERO El fichero aparecerá en color verde al hacer un git status Volver a modificar el fichero El fichero aparecerá dos veces al hacer un git status: En color verde, indicando que se ha añadido el primer cambio al área de preparación En color rojo, indicando que hay un segundo cambio posterior que no se ha incluido en el área de preparación Si se ejecuta un git commit en este momento solamente se incorporará el primer cambio al repositorio como nueva versión. El segundo cambio seguirá existiendo (el archivo no habrá cambiado), pero no estará guardado en el commit Si se desea agregar el segundo cambio se deberá ejecutar nuevamente git add para añadirlo al área de preparación Visualizar cambios de los archivos en el área de preparación # git diff --staged git diff --staged \u0026lt;archivo\u0026gt; Este comando muestra los cambios que se han agregado al área de preparación (diferencia entre la última versión guardada en el repositorio y el área de preparación).\nConfirmar cambios (commit) # git commit -m \u0026#34;MENSAJE\u0026#34; Un commit equivale a una nueva versión en el repositorio. Cada commit tiene un identificador único, denominado hash. Los commits están relacionados entre sí mediante una red de tipo grafo.\nEn la siguiente sesión estudiaremos como volver atrás en la historia para acceder a una versión anterior del repositorio si se desea.\nIgnorar archivos # Archivo .gitignore Plantillas de archivos .gitignore. Las rutas y nombres de archivo que aparezcan en el fichero .gitignore serán ignoradas por git siempre que no hayan sido añadidas previamente al área de preparación o al repositorio. Por ejemplo, si añadimos un archivo al área de preparación mediante git add y a continuación lo añadimos al fichero .gitignore, git lo seguirá manteniendo en el área de preparación, por lo que será incluido en el repositorio si ejecutamos un git commit.\nDe igual manera, si previamente hemos guardado un archivo en el repositorio mediante git commit y a continuación lo incluimos en el fichero .gitignore, git no lo borrará: será necesario borrarlo del sistema de ficheros (a través de la consola o el navegador de archivos) y añadir los cambios (git add y git commit) para que se borre del repositorio. Una vez borrado, si lo volvemos a crear veremos que git sí que lo ignora si está incluido en el fichero .gitignore.\nHistorial de cambios # git log git log --graph Este comando muestra el histórico de los commits del repositorio. Se puede navegar en el listado mediante los cursores y la barra espaciadora. Para salir hay que pulsar la tecla q.\nVer cambios realizados en anteriores commits # git show \u0026lt;commit\u0026gt; Este comando nos permite mostrar los cambios que se introdujeron en un determinado commit. En primer lugar se puede ejecutar git log para buscar el hash del commit que nos interese y a continuación ejecutar git show indicando después el hash del commit correspondiente.\nLos hash de los commits tienen 40 caracteres, pero no es necesario copiarlos enteros: basta con indicar entre los 8 y 10 primeros caracteres para identificar un commit correctamente.\nQuitar archivo del área de preparación # git reset HEAD \u0026lt;archivo\u0026gt; En ocasiones nos encontramos con que hemos añadido cambios al área de preparación que no queremos incorporar al commit. Para ello podemos utilizar este comando, que elimina los cambios del fichero correspondiente del área de preparación. Los cambios no se pierden en ningún caso.\nEliminar las modificaciones con respecto al último commit # # ¡PELIGRO! Todos los cambios que se hayan hecho al archivo desde el último commit se eliminarán git checkout -- \u0026lt;archivo\u0026gt; Este comando es peligroso, ya que elimina todos los cambios del archivo que no hayan sido guardados en el repositorio. Es decir, si el archivo tiene cambios y está en color rojo, se perderán dichos cambios. Este comando puede ser útil para dejar un archivo tal como estaba en la última versión guardada del repositorio.\nEtiquetado # git tag Este comando crea un tag en el commit en que nos encontremos en este momento. Un tag es un alias que se utiliza para hacer referencia a un commit sin necesidad de saber su hash. Normalmente se utiliza para indicar números o nombres de versiones asociadas a un determinado commit. De esta manera podemos identificar una versión de una manera más amable.\nEl nombre de los tag se puede utilizar con los comandos de git: por ejemplo, git show.\nGuardado temporal # # Guardado temporal de cambios no añadidos al área de preparación git stash # Restaurar cambios guardados mediante git stash git stash pop En ocasiones se hacen cambios que se desea preservar para más adelante: por ejemplo, trabajamos en una modificación de un fichero y de repente nos avisan de que hay un bug en otro fichero que tiene que ser resuelto inmediatamente. Para no trabajar en ambas tareas a la vez podemos ejecutar git stash: los cambios que tenemos en ese momento y que no están en el área de preparación (es decir, los cambios que están en color rojo) se guardan en un área temporal; al ejecutar git status veremos que no hay ninguna modificación, el directorio de trabajo está limpio.\nA continuación trabajamos en el bug, hacemos cambios y al terminar ejecutamos git add y git commit para resolverlo. Una vez resuelto, ejecutamos git stash pop y recuperamos los cambios que estábamos realizando antes de ser interrumpidos: veremos que git status nos muestra en color rojo los archivos que habíamos modificado al principio.\n"}]